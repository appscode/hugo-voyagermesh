<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Secure HAProxy Ingress Controller for Kubernetes</title><link>https://voyagermesh.com/</link><description>Recent content on Secure HAProxy Ingress Controller for Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://voyagermesh.com/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://voyagermesh.com/docs/10.0.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/external-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/external-ip/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-class/</guid><description>Running voyager alongside with other ingress controller Voyager can be configured to handle default kubernetes ingress or only ingress.appscode.com. voyager can also be run along side with other controllers.
--ingress-class // this flag can be set to 'voyager' to handle only ingress // with annotation kubernetes.io/ingress.class=voyager. // If unset, voyager will also handle ingress without ingress-class annotation.</description></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-merging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-merging/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-types/hostport/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-types/internal/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-types/loadbalancer/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/ingress-types/nodeport/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/bind-address/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/debugging/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/dns/external-dns/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/grpc/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/monitoring/coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/monitoring/coreos-prometheus-operator/</guid><description>$ kubectl create -f ./docs/examples/monitoring/demo-0.yaml namespace &amp;quot;demo&amp;quot; created deployment &amp;quot;prometheus-operator&amp;quot; created $ kubectl get pods -n demo NAME READY STATUS RESTARTS AGE prometheus-operator-449376836-mq4p3 1/1 Running 0 1m $ kubectl create -f ./docs/examples/monitoring/demo-1.yaml prometheus &amp;quot;prometheus&amp;quot; created service &amp;quot;prometheus&amp;quot; created $ kubectl get pods -n demo --watch NAME READY STATUS RESTARTS AGE prometheus-operator-449376836-mq4p3 1/1 Running 0 1m prometheus-prometheus-0 0/2 ContainerCreating 0 6s prometheus-prometheus-0 1/2 Running 0 25s prometheus-prometheus-0 2/2 Running 0 26s ^C‚èé $ .</description></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/security/rbac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/security/rbac/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/security/restrict-namespace/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/ssh/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/websocket/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/setup/baremetal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/setup/baremetal/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/setup/gke/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/setup/gke/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0-rc.11/setup/minikube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/setup/minikube/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/concepts/external-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/external-ip/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/concepts/ingress-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/ingress-class/</guid><description>Running voyager alongside with other ingress controller Voyager can be configured to handle default kubernetes ingress or only ingress.appscode.com. voyager can also be run along side with other controllers.
--ingress-class // this flag can be set to 'voyager' to handle only ingress // with annotation kubernetes.io/ingress.class=voyager. // If unset, voyager will also handle ingress without ingress-class annotation.</description></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/concepts/ingress-merging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/ingress-merging/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/ingress-types/hostport/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/ingress-types/internal/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/ingress-types/loadbalancer/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/ingress-types/nodeport/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/bind-address/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/debugging/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/dns/external-dns/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/grpc/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/monitoring/coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/monitoring/coreos-prometheus-operator/</guid><description>$ kubectl create -f ./docs/examples/monitoring/demo-0.yaml namespace &amp;quot;demo&amp;quot; created deployment &amp;quot;prometheus-operator&amp;quot; created $ kubectl get pods -n demo NAME READY STATUS RESTARTS AGE prometheus-operator-449376836-mq4p3 1/1 Running 0 1m $ kubectl create -f ./docs/examples/monitoring/demo-1.yaml prometheus &amp;quot;prometheus&amp;quot; created service &amp;quot;prometheus&amp;quot; created $ kubectl get pods -n demo --watch NAME READY STATUS RESTARTS AGE prometheus-operator-449376836-mq4p3 1/1 Running 0 1m prometheus-prometheus-0 0/2 ContainerCreating 0 6s prometheus-prometheus-0 1/2 Running 0 25s prometheus-prometheus-0 2/2 Running 0 26s ^C‚èé $ .</description></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/security/rbac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/security/rbac/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/security/restrict-namespace/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/ssh/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/websocket/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/setup/baremetal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/setup/baremetal/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/setup/gke/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/setup/gke/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/5.0.0/setup/minikube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/setup/minikube/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/changelog/</guid><description>Change Log 6.0.0-rc.0 (2018-02-14) Full Changelog
Fixed bugs:
Document GKE cluster RBAC setup #564 Closed issues:
LoadBalancer vs NodePort with manualy setup LB (haproxy.cfg difference) #867 Ignore Rule if backend service is missing #848 Failed to list ServiceMonitor #847 Uninstall deletes object only from kube-system namespace #846 Multi backends for one domain #833 TCP Ingress Health Check Annotations not Working #832 DNS-01 Challenge provider missing key in credential #821 Allow users to specify backend names #819 Should we make acl names part of the &amp;ldquo;api&amp;rdquo;?</description></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/bind-address/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/debugging/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/dns/external-dns/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/grpc/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/monitoring/coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/monitoring/coreos-prometheus-operator/</guid><description>$ kubectl create -f ./docs/examples/monitoring/demo-0.yaml namespace &amp;quot;demo&amp;quot; created deployment &amp;quot;prometheus-operator&amp;quot; created $ kubectl get pods -n demo NAME READY STATUS RESTARTS AGE prometheus-operator-449376836-mq4p3 1/1 Running 0 1m $ kubectl create -f ./docs/examples/monitoring/demo-1.yaml prometheus &amp;quot;prometheus&amp;quot; created service &amp;quot;prometheus&amp;quot; created $ kubectl get pods -n demo --watch NAME READY STATUS RESTARTS AGE prometheus-operator-449376836-mq4p3 1/1 Running 0 1m prometheus-prometheus-0 0/2 ContainerCreating 0 6s prometheus-prometheus-0 1/2 Running 0 25s prometheus-prometheus-0 2/2 Running 0 26s ^C‚èé $ .</description></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/security/rbac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/security/rbac/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/security/restrict-namespace/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/ssh/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/websocket/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/setup/baremetal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/setup/baremetal/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.0/setup/minikube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/setup/minikube/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/debugging/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/grpc/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/security/restrict-namespace/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/ssh/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/websocket/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.2/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/changelog/</guid><description>Change Log 6.0.0-rc.2 (2018-03-05) Full Changelog
Fixed bugs:
Voyager 6.0.0 on GKE 1.8.5: Failed to list *v1beta1.Ingress: unstructured cannot convert field labels #889 Merged pull requests:
Enable RBAC by default in installer #913 (tamalsaha) Fix installer #912 (tamalsaha) Prepare docs for 6.0.0-rc.2 #911 (tamalsaha) Stop using field selector in haproxy controller #910 (tamalsaha) Update chart to match RBAC best practices for charts #909 (tamalsaha) Add checks to installer script #908 (tamalsaha) Cleanup admission webhook #907 (tamalsaha) Update changelog for 6.</description></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/debugging/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/grpc/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/security/restrict-namespace/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/ssh/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/websocket/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.1/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.2.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.3.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.4.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.1/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/9.0.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.1/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/haproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/haproxy/</guid><description/></item><item><title/><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/debugging/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/grpc/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/restrict-namespace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/restrict-namespace/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/ssh/</guid><description> New to Voyager? Please start here.</description></item><item><title/><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/websocket/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/websocket/</guid><description> New to Voyager? Please start here.</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Acknowledgement | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/acknowledgement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/acknowledgement/</guid><description>Acknowledgement docker-library/haproxy https://github.com/docker-library/haproxy kubernetes/contrib https://github.com/kubernetes/contrib/tree/master/service-loadbalancer kubernetes/ingress https://github.com/kubernetes/ingress xenolf/lego https://github.com/appscode/lego kelseyhightower/kube-cert-manager https://github.com/kelseyhightower/kube-cert-manager PalmStoneGames/kube-cert-manager https://github.com/PalmStoneGames/kube-cert-manager Kubernetes cloudprovider implementation</description></item><item><title>Agent Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/agent-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/agent-check/</guid><description>New to Voyager? Please start here.
Agent Check haproxy-agent-check can be enabled for a specific backend server by assigning the agent server port in ingress.appscode.com/agent-port annotations to the corresponding service. You can also add agent-inter in ingress.appscode.com/agent-interval annotations to the same service, which defaults to 2000ms if not mentioned.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Agent Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/agent-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/agent-check/</guid><description>New to Voyager? Please start here.
Agent Check haproxy-agent-check can be enabled for a specific backend server by assigning the agent server port in ingress.appscode.com/agent-port annotations to the corresponding service. You can also add agent-inter in ingress.appscode.com/agent-interval annotations to the same service, which defaults to 2000ms if not mentioned.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Agent Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/agent-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/agent-check/</guid><description>New to Voyager? Please start here.
Agent Check haproxy-agent-check can be enabled for a specific backend server by assigning the agent server port in ingress.appscode.com/agent-port annotations to the corresponding service. You can also add agent-inter in ingress.appscode.com/agent-interval annotations to the same service, which defaults to 2000ms if not mentioned.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Agent Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/agent-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/agent-check/</guid><description>New to Voyager? Please start here.
Agent Check haproxy-agent-check can be enabled for a specific backend server by assigning the agent server port in ingress.appscode.com/agent-port annotations to the corresponding service. You can also add agent-inter in ingress.appscode.com/agent-interval annotations to the same service, which defaults to 2000ms if not mentioned.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Agent Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/agent-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/agent-check/</guid><description>New to Voyager? Please start here.
Agent Check haproxy-agent-check can be enabled for a specific backend server by assigning the agent server port in ingress.appscode.com/agent-port annotations to the corresponding service. You can also add agent-inter in ingress.appscode.com/agent-interval annotations to the same service, which defaults to 2000ms if not mentioned.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Agent Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/agent-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/agent-check/</guid><description>New to Voyager? Please start here.
Agent Check haproxy-agent-check can be enabled for a specific backend server by assigning the agent server port in ingress.appscode.com/agent-port annotations to the corresponding service. You can also add agent-inter in ingress.appscode.com/agent-interval annotations to the same service, which defaults to 2000ms if not mentioned.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Agent Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/agent-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/agent-check/</guid><description>New to Voyager? Please start here.
Agent Check haproxy-agent-check can be enabled for a specific backend server by assigning the agent server port in ingress.appscode.com/agent-port annotations to the corresponding service. You can also add agent-inter in ingress.appscode.com/agent-interval annotations to the same service, which defaults to 2000ms if not mentioned.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Agent Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/agent-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/agent-check/</guid><description>New to Voyager? Please start here.
Agent Check haproxy-agent-check can be enabled for a specific backend server by assigning the agent server port in ingress.appscode.com/agent-port annotations to the corresponding service. You can also add agent-inter in ingress.appscode.com/agent-interval annotations to the same service, which defaults to 2000ms if not mentioned.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Agent Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/agent-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/agent-check/</guid><description>New to Voyager? Please start here.
Agent Check haproxy-agent-check can be enabled for a specific backend server by assigning the agent server port in ingress.appscode.com/agent-port annotations to the corresponding service. You can also add agent-inter in ingress.appscode.com/agent-interval annotations to the same service, which defaults to 2000ms if not mentioned.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Avoid 503 with Graceful Server Shutdown | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/graceful-reload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/graceful-reload/</guid><description>New to Voyager? Please start here.
Avoid 503 with Graceful Server Shutdown Multiple Voyager users have been facing an issue regarding getting 503 response randomly after updating ingress. So, we looked into what was going wrong and here&amp;rsquo;s the solution and the reason behind this problem.
HAProxy supports both graceful and hard stop. For Voyager, we are using graceful stop. The graceful stop is triggered when the SIGUSR1 signal is sent to the haproxy process.</description></item><item><title>Avoid 503 with Graceful Server Shutdown | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/graceful-reload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/graceful-reload/</guid><description>New to Voyager? Please start here.
Avoid 503 with Graceful Server Shutdown Multiple Voyager users have been facing an issue regarding getting 503 response randomly after updating ingress. So, we looked into what was going wrong and here&amp;rsquo;s the solution and the reason behind this problem.
HAProxy supports both graceful and hard stop. For Voyager, we are using graceful stop. The graceful stop is triggered when the SIGUSR1 signal is sent to the haproxy process.</description></item><item><title>Avoid 503 with Graceful Server Shutdown | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/graceful-reload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/graceful-reload/</guid><description>New to Voyager? Please start here.
Avoid 503 with Graceful Server Shutdown Multiple Voyager users have been facing an issue regarding getting 503 response randomly after updating ingress. So, we looked into what was going wrong and here&amp;rsquo;s the solution and the reason behind this problem.
HAProxy supports both graceful and hard stop. For Voyager, we are using graceful stop. The graceful stop is triggered when the SIGUSR1 signal is sent to the haproxy process.</description></item><item><title>Avoid 503 with Graceful Server Shutdown | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/graceful-reload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/graceful-reload/</guid><description>New to Voyager? Please start here.
Avoid 503 with Graceful Server Shutdown Multiple Voyager users have been facing an issue regarding getting 503 response randomly after updating ingress. So, we looked into what was going wrong and here&amp;rsquo;s the solution and the reason behind this problem.
HAProxy supports both graceful and hard stop. For Voyager, we are using graceful stop. The graceful stop is triggered when the SIGUSR1 signal is sent to the haproxy process.</description></item><item><title>Avoid 503 with Graceful Server Shutdown | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/graceful-reload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/graceful-reload/</guid><description>New to Voyager? Please start here.
Avoid 503 with Graceful Server Shutdown Multiple Voyager users have been facing an issue regarding getting 503 response randomly after updating ingress. So, we looked into what was going wrong and here&amp;rsquo;s the solution and the reason behind this problem.
HAProxy supports both graceful and hard stop. For Voyager, we are using graceful stop. The graceful stop is triggered when the SIGUSR1 signal is sent to the haproxy process.</description></item><item><title>Avoid 503 with Graceful Server Shutdown | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/graceful-reload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/graceful-reload/</guid><description>New to Voyager? Please start here.
Avoid 503 with Graceful Server Shutdown Multiple Voyager users have been facing an issue regarding getting 503 response randomly after updating ingress. So, we looked into what was going wrong and here&amp;rsquo;s the solution and the reason behind this problem.
HAProxy supports both graceful and hard stop. For Voyager, we are using graceful stop. The graceful stop is triggered when the SIGUSR1 signal is sent to the haproxy process.</description></item><item><title>Avoid 503 with Graceful Server Shutdown | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/graceful-reload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/graceful-reload/</guid><description>New to Voyager? Please start here.
Avoid 503 with Graceful Server Shutdown Multiple Voyager users have been facing an issue regarding getting 503 response randomly after updating ingress. So, we looked into what was going wrong and here&amp;rsquo;s the solution and the reason behind this problem.
HAProxy supports both graceful and hard stop. For Voyager, we are using graceful stop. The graceful stop is triggered when the SIGUSR1 signal is sent to the haproxy process.</description></item><item><title>Avoid 503 with Graceful Server Shutdown | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/graceful-reload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/graceful-reload/</guid><description>New to Voyager? Please start here.
Avoid 503 with Graceful Server Shutdown Multiple Voyager users have been facing an issue regarding getting 503 response randomly after updating ingress. So, we looked into what was going wrong and here&amp;rsquo;s the solution and the reason behind this problem.
HAProxy supports both graceful and hard stop. For Voyager, we are using graceful stop. The graceful stop is triggered when the SIGUSR1 signal is sent to the haproxy process.</description></item><item><title>Avoid 503 with Graceful Server Shutdown | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/graceful-reload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/graceful-reload/</guid><description>New to Voyager? Please start here.
Avoid 503 with Graceful Server Shutdown Multiple Voyager users have been facing an issue regarding getting 503 response randomly after updating ingress. So, we looked into what was going wrong and here&amp;rsquo;s the solution and the reason behind this problem.
HAProxy supports both graceful and hard stop. For Voyager, we are using graceful stop. The graceful stop is triggered when the SIGUSR1 signal is sent to the haproxy process.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Health Check | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/health-check/</guid><description>New to Voyager? Please start here.
Server Health Check You can enable haproxy-health-checks for a specific backend server by applying ingress.appscode.com/check and ingress.appscode.com/check-port annotations to the corresponding service. You can also configure health-check behavior using backend rules.
Example First deploy and expose a test server:
$ kubectl apply -f test-server.yaml apiVersion: apps/v1 kind: Deployment metadata: labels: run: test-server name: test-server namespace: default spec: selector: matchLabels: run: test-server template: metadata: labels: run: test-server spec: containers: - image: appscode/test-server:2.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/backend-rule/</guid><description>Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRule: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/backend-rule/</guid><description>Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRule: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/backend-rule/</guid><description>Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/backend-rule/</guid><description>Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/backend-rule/</guid><description>Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/backend-rule/</guid><description>New to Voyager? Please start here.
Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRules: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/tls/backend-tls/</guid><description>Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic
if verify not set the following error may occurred [/etc/haproxy/haproxy.cfg:49] verify is enabled by default but no CA file specified. If you're running on a LAN where you're certain to trust the server's certificate, please set an explicit 'verify none' statement on the 'server' line, or use 'ssl-server-verify none' in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/tls/backend-tls/</guid><description>Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic
if verify not set the following error may occurred [/etc/haproxy/haproxy.cfg:49] verify is enabled by default but no CA file specified. If you're running on a LAN where you're certain to trust the server's certificate, please set an explicit 'verify none' statement on the 'server' line, or use 'ssl-server-verify none' in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/tls/backend-tls/</guid><description>Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic
if verify not set the following error may occurred [/etc/haproxy/haproxy.cfg:49] verify is enabled by default but no CA file specified. If you're running on a LAN where you're certain to trust the server's certificate, please set an explicit 'verify none' statement on the 'server' line, or use 'ssl-server-verify none' in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/tls/backend-tls/</guid><description>Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/tls/backend-tls/</guid><description>Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Backend TLS Support | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tls/backend-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tls/backend-tls/</guid><description>New to Voyager? Please start here.
Backend TLS Support Voyager can connect to a tls enabled backend server with or without ssl verification.
Available options:
ssl: Creates a TLS/SSL socket when connecting to this server in order to cipher/decipher the traffic. If verify not set the following error may occurred: Verify is enabled by default but no CA file specified. If you&amp;rsquo;re running on a LAN where you&amp;rsquo;re certain to trust the server&amp;rsquo;s certificate, please set an explicit &amp;lsquo;verify none&amp;rsquo; statement on the &amp;lsquo;server&amp;rsquo; line, or use &amp;lsquo;ssl-server-verify none&amp;rsquo; in the global section to disable server-side verifications by default.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/security/basic-auth/</guid><description>Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.kubernetes.io/auth-type: the only supported type is basic ingress.kubernetes.io/auth-realm: an optional string with authentication realm ingress.kubernetes.io/auth-secret: name of the secret Each line of the auth file should have:</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/security/basic-auth/</guid><description>Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.appscode.com/auth-secret: name of the secret Each line of the auth file should have:</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/security/basic-auth/</guid><description>Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.kubernetes.io/auth-type: the only supported type is basic ingress.kubernetes.io/auth-realm: an optional string with authentication realm ingress.kubernetes.io/auth-secret: name of the secret Each line of the auth file should have:</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/security/basic-auth/</guid><description>Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.appscode.com/auth-secret: name of the secret Each line of the auth file should have:</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/security/basic-auth/</guid><description>Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.appscode.com/auth-secret: name of the secret Each line of the auth file should have:</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Basic Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/basic-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/basic-auth/</guid><description>New to Voyager? Please start here.
Basic Authentication This example demonstrates how to configure Basic Authentication on Voyager Ingress controller.
Using Basic Authentication Voyager Ingress read user and password from files stored on secrets, one user and password per line. Secret name, realm and type are configured with annotations in the ingress resource:
ingress.appscode.com/auth-type: the only supported type is basic ingress.appscode.com/auth-realm: an optional string with authentication realm ingress.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/blue-green-deployment/</guid><description>Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.name image: appscode/test-server:1.1 imagePullPolicy: IfNotPresent name: server ports: - containerPort: 8080 name: http-1 protocol: TCP --- apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v2 name: deploymet-2 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v2 template: metadata: labels: app: deployment app-version: v2 annotations: ingress.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/blue-green-deployment/</guid><description>Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.name image: appscode/test-server:1.1 imagePullPolicy: IfNotPresent name: server ports: - containerPort: 8080 name: http-1 protocol: TCP --- apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v2 name: deploymet-2 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v2 template: metadata: labels: app: deployment app-version: v2 annotations: ingress.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/blue-green-deployment/</guid><description>Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.name image: appscode/test-server:1.1 imagePullPolicy: IfNotPresent name: server ports: - containerPort: 8080 name: http-1 protocol: TCP --- apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v2 name: deploymet-2 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v2 template: metadata: labels: app: deployment app-version: v2 annotations: ingress.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/blue-green-deployment/</guid><description>Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.name image: appscode/test-server:1.1 imagePullPolicy: IfNotPresent name: server ports: - containerPort: 8080 name: http-1 protocol: TCP --- apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v2 name: deploymet-2 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v2 template: metadata: labels: app: deployment app-version: v2 annotations: ingress.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/blue-green-deployment/</guid><description>Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.name image: appscode/test-server:1.1 imagePullPolicy: IfNotPresent name: server ports: - containerPort: 8080 name: http-1 protocol: TCP --- apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v2 name: deploymet-2 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v2 template: metadata: labels: app: deployment app-version: v2 annotations: ingress.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: extensions/v1beta1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: apps/v1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: apps/v1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: apps/v1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: apps/v1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: apps/v1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: apps/v1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: apps/v1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: apps/v1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>Blue Green Deployments | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/blue-green-deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/blue-green-deployment/</guid><description>New to Voyager? Please start here.
Blue Green Deployments Voayger supports Blue Green deployments using weighted loadbalancing for backend pods. Following example illustrates a weighted loadbalance scenario.
apiVersion: apps/v1 kind: Deployment metadata: labels: app: deployment app-version: v1 name: deployment-1 namespace: default spec: replicas: 1 selector: matchLabels: app: deployment app-version: v1 template: metadata: labels: app: deployment app-version: v1 annotations: ingress.appscode.com/backend-weight: &amp;#34;90&amp;#34; spec: containers: - env: - name: POD_NAME valueFrom: fieldRef: apiVersion: v1 fieldPath: metadata.</description></item><item><title>cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/</guid><description>Guides Guides show you how to use jetstack/cert-manager with Voyager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Multiple Providers</description></item><item><title>cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/</guid><description>Guides Guides show you how to use jetstack/cert-manager with Voyager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Multiple Providers</description></item><item><title>cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/</guid><description>Guides Guides show you how to use jetstack/cert-manager with Voyager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Multiple Providers</description></item><item><title>cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/</guid><description>Guides Guides show you how to use jetstack/cert-manager with Voyager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Multiple Providers</description></item><item><title>cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/</guid><description>Guides Guides show you how to use jetstack/cert-manager with Voyager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Multiple Providers</description></item><item><title>cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/</guid><description>Guides Guides show you how to use jetstack/cert-manager with Voyager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Multiple Providers</description></item><item><title>cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/</guid><description>Guides Guides show you how to use jetstack/cert-manager with Voyager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Multiple Providers</description></item><item><title>cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/</guid><description>Guides Guides show you how to use jetstack/cert-manager with Voyager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Multiple Providers</description></item><item><title>cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/</guid><description>Guides Guides show you how to use jetstack/cert-manager with Voyager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Multiple Providers</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/faq/</guid><description>FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug? To debug, describe the certificate object and check the events listed under it.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/certificate/faq/</guid><description>FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug? To debug, describe the certificate object and check the events listed under it.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/faq/</guid><description>FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug? To debug, describe the certificate object and check the events listed under it.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/faq/</guid><description>FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug? To debug, describe the certificate object and check the events listed under it.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/faq/</guid><description>FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug? To debug, describe the certificate object and check the events listed under it.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Voyager operator will try renewing your certificate 7 days prior to expiration. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.
I think I did everything according to this doc but my certificate is not issuing? How do I debug?</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 9.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate FAQ | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/faq/</guid><description>New to Voyager? Please start here.
FAQ Let&amp;rsquo;s Encrypt FAQs How do I renew my LE certificates? LE issues certificates that are valid for 90 days. Since 10.0.0 release, Voyager operator will try renewing your certificate 15 days (was 7 days in prior releases) prior to expiration. You can also configure how soon Voyager should try to renew the certificate by setting the spec.renewalBufferDays field in Certificate crd. Once renewed certificates are issued, HAProxy will be automatically updated to use the new certificates.</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 chanllege providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Certificate | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/</guid><description>Guides Guides show you how to use Voyager&amp;rsquo;s built-in certificate manager to issue free TLS/SSL certificates from Let&amp;rsquo;s Encrypt.
Features Provision free TLS certificates (including wildcard certificates) from Let&amp;rsquo;s Encrypt. Manage certificates declaratively using a Kubernetes Custom Resource Definition (CRD). Domain validation using ACME http-01 and dns-01 challenges. Support for many popular DNS providers. Auto Renew certificates. Use issued certificates with Ingress to secure communications. Next Steps Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge DNS-01 challenge providers Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS Supported DNS Challenge Providers Deleting Certificate Frequently Asked Questions</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/welcome/changelog/</guid><description>Change Log 10.0.0 (2019-04-28) Full Changelog
Closed issues:
Custom LUA scripts support #1370 9.0.0 fails to install on new GKE cluster #1360 Cannot use voyager/client with client-go collision with vendored packages #1356 Oauth2_Proxy is dead, long live Oauth2_Proxy #1302 Upgrade to HAProxy 1.9.5 #1362 Merged pull requests:
Update Kubernetes client libraries to 1.13.5 #1379 (tamalsaha) Get id-token from Authorization header #1376 (diptadas) Update haproxy version to 1.9.6 #1374 (diptadas) Update haproxy version to 1.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/changelog/</guid><description>Change Log Unreleased Full Changelog
Implemented enhancements:
Source IP affinity #759 Fixed bugs:
basic auth remove on upgrade to 5.0.0-rc11 #873 whitelist did not work #866 Update voyager docs #50 Closed issues:
Update Prometheus integration #893 Disabling HSTS - doesn&amp;rsquo;t work #881 Upgrade from 5.0.0-rc.11 to 6.0.0-rc.1 #876 AWS ELB Proxy IP forwarded for occurs errors #749 How to use voyager instead of kubernetes nginx ingress controller #742 RBAC for voyager #732 Document default mode does not work for minikube #545 Document how to use Host IP as external IP in minikube for LoadBalancer type Service #511 Document RBAC setup on installer page.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/welcome/changelog/</guid><description>Change Log 6.0.0 (2018-03-13) Full Changelog
Fixed bugs:
TCP Ingress: invalid memory address or nil pointer dereference #906 Voyager 6.0.0 on GKE 1.8.5: Failed to list *v1beta1.Ingress: unstructured cannot convert field labels #889 Run service monitor informer in its own go routine. #929 (tamalsaha) Various fixes and improved logging #928 (tamalsaha) Use user provided cookie name for default backend #920 (tamalsaha) Fixed ingress finalizer #917 (diptadas) Detect change when deletion timestamp is set for Ingress #916 (tamalsaha) Closed issues:</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/changelog/</guid><description>Change Log 7.0.0-rc.0 (2018-05-10) Full Changelog
Fixed bugs:
question re: ssl-passthrough #1012 SSL redirect not working for LB type NodePort #967 Generate correct schema for int-or-string type #978 (tamalsaha) Fix openapi spec for voyager crds #973 (tamalsaha) Fix errors while updating existing CRD #971 (diptadas) Add RBAC for events #961 (tamalsaha) Closed issues:
Test failing for LB type NodePort in Minikube v26 #1000 Support Stretch / Alpine based HAproxy image #997 Consider implementing LetsEncrypt wildcard certificates #994 Test HAproxy config before setting to configmap #989 labels are not inherited to resources created via voyager Ingress #986 Add Explicit {{ .</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/changelog/</guid><description>Change Log 7.0.0-rc.1 (2018-05-14) Full Changelog
Fixed bugs:
Fix panic #1045 Include a test pem to fool haproxy in operator pod. #1038 (tamalsaha) Closed issues:
Delete Ingress (service and co.) #1043 Allow h2 ALPN option for http mode #1040 Letsencrypt wildcard certs? #1024 CrashLoopBackOff on GKE #990 CrashLoopBackOff #987 Merged pull requests:
Prepare docs for 7.0.0-rc.1 #1050 (tamalsaha) Correctly set port to binder #1049 (tamalsaha) Do not use absolute path for minikube, fixes #1047 for 6.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/changelog/</guid><description>Change Log 7.0.0-rc.2 (2018-05-22) Full Changelog
Fixed bugs:
Fix OAuth implementation #1053 Closed issues:
Can&amp;rsquo;t run tests on Solus linux, path for minikube is hardcoded #1047 Merged pull requests:
Clarify messaging #1064 (tamalsaha) Install correct version of voyager chart #1063 (tamalsaha) Avoid creating apiservice when webhooks are not used. #1062 (tamalsaha) Add &amp;ndash;haproxy-image-tag flag to installer #1061 (tamalsaha) Prepare docs for 7.0.0-rc.2 #1060 (tamalsaha) Support NodeSelector and Tolerations via annotation for std ingress #1059 (tamalsaha) Remove redundant assignment #1058 (gavvvr) Move oauth2-proxy image to Voyager repo #1057 (tamalsaha) No auth-check for auth-backend-path itself #1056 (diptadas) Added http2 example #1052 (ssro) 7.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/changelog/</guid><description>Change Log Unreleased Full Changelog
Fixed bugs:
rc2 operator crashes #1070 Merged pull requests:
Checked nil pointer before validating oauth #1071 (diptadas) Update changelog #1069 (tamalsaha) 7.0.0-rc.2 (2018-05-23) Full Changelog
Fixed bugs:
Fix OAuth implementation #1053 Use hooks for user roles in chart #1066 (tamalsaha) Closed issues:
Can&amp;rsquo;t run tests on Solus linux, path for minikube is hardcoded #1047 Merged pull requests:</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/welcome/changelog/</guid><description>Change Log 7.0.0 (2018-05-28) Full Changelog
Merged pull requests:
Prepare 7.0.0 release #1076 (tamalsaha) 7.0.0-rc.3 (2018-05-23) Full Changelog
Fixed bugs:
rc2 operator crashes #1070 Merged pull requests:
Prepare docs for 7.0.0-rc.3 #1072 (tamalsaha) Checked nil pointer before validating oauth #1071 (diptadas) Update changelog #1069 (tamalsaha) 7.0.0-rc.2 (2018-05-23) Full Changelog
Fixed bugs:
Fix OAuth implementation #1053 Use hooks for user roles in chart #1066 (tamalsaha) Closed issues:</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/welcome/changelog/</guid><description>Change Log Unreleased Full Changelog
Merged pull requests:
haproxy-stats.md typo fix #1127 (gavvvr) 7.1.0 (2018-06-12) Full Changelog
Fixed bugs:
Deleting voyager gets stuck #1098 Port 443 is opened with aws cert manager even only TCP is used #707 acme-challenge .well-known path is getting redirected #1097 CRD registration fails with &amp;ndash;restrict-to-namespace #1083 Fix formatting errors in validator #1085 (tamalsaha) Closed issues:
Add metallb support for ExternalTrafficPolicy #1116 Add support for metallb in install script #1115 Add load-balancer-ip annotation support for metallb.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/welcome/changelog/</guid><description>Change Log 7.1.1 (2018-06-13) Full Changelog
Fixed bugs:
Fix rbac permissions for service monitors #1133 (tamalsaha) Closed issues:
Get new LE account if user hits rate limits #1122 Merged pull requests:
Prepare docs for 7.1.1 release #1135 (tamalsaha) Get new LE account if user hits rate limits #1134 (tamalsaha) Do not create namespace from yaml, it gets created with kubectl manually #1132 (gavvvr) Allocate cpu for operator pod.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/welcome/changelog/</guid><description>Change Log 7.2.0 (2018-06-25) Full Changelog
Implemented enhancements:
Allow user to set healthCheckNodePort for LoadBalancer #1128 Fixed bugs:
Certificate renew fails #1023 Operator&amp;rsquo;s memory usage over time #1004 Closed issues:
4xx and 5xx stats are not reported via prometheus exporter #1146 Release java client for Voyager #1142 Document ingress.appscode.com/check #1140 tls-backend annotation ignored for external service #1139 Revendor lego #1137 support forwarding authorization header for oauth2_proxy #1073 Pause Certificate #1022 Merged pull requests:</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/welcome/changelog/</guid><description>Change Log 7.3.0 (2018-07-08) Full Changelog
Fixed bugs:
Throw validation error when LBType changes. #1172 (tamalsaha) Closed issues:
Backend name conflicts for multiple bind addresses #1164 RBAC broken in 7.2 if using ClusterRole #1163 Merged pull requests:
Format shell scripts #1178 (tamalsaha) Remove status from crd.yaml #1176 (tamalsaha) Add description to crd structs #1174 (tamalsaha) Use HAProxy 1.8.12 #1175 (tamalsaha) Document enableStatusSubresource in chart #1171 (tamalsaha) Remove deprecated fields from Certificate crd #1170 (tamalsaha) Enable status subresource for voyager crds #1169 (tamalsaha) Remove description on root schema #1168 (conorbranagan) Add nodeSelector for the operator #1166 (ocdi) Fixed auto-generated backend names #1165 (diptadas) 7.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/welcome/changelog/</guid><description>Change Log 7.4.0 (2018-07-12) Full Changelog
Closed issues:
Supporting multiple hostnames per backend service #1187 Custom Tolerations and affinity #1181 Merged pull requests:
Chart support for custom tolerations and affinity #1182 (octplane) 7.3.0 (2018-07-08) Full Changelog
Fixed bugs:
Upgrade HAProxy #1173 Throw validation error when LBType changes. #1172 (tamalsaha) Closed issues:
Backend name conflicts for multiple bind addresses #1164 RBAC broken in 7.2 if using ClusterRole #1163 Crash when operator container starts #1161 Merged pull requests:</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/welcome/changelog/</guid><description>Change Log 8.0.0 (2018-10-09) Full Changelog
Fixed bugs:
Support custom errorfiles with .http ext #1238 Correctly handle ignored openapi prefixes #1198 (tamalsaha) Closed issues:
Understanding/Documenting CPU Usage, behaviour and limits. #1267 &amp;ldquo;enableValidatingWebhook: false&amp;rdquo; doesn&amp;rsquo;t work anymore #1264 Support readiness and liveness probes in generated deployments #1262 Haproxy pods are constantly recreated when using multiple annotations #1251 Support TLSv1.3 #1245 Support Internal Load Balancer Type #1197 Fix error message #1194 official page: docs link dead #1190 Use apps/v1 api #583 Merged pull requests:</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/welcome/changelog/</guid><description>Change Log 8.0.1 (2018-10-11) Full Changelog
Fixed bugs:
Support EKS #1130 Test against AKS #1112 Only use apps/v1 apigroup from controller. #1274 (tamalsaha) Merged pull requests:
Expose flags to installer script #1278 (tamalsaha) Fix webhook xray checker #1277 (tamalsaha) Handle ErrCallingWebhook in xray #1276 (tamalsaha) Prepare docs for 8.0.1 release #1275 (tamalsaha) Fix upgrade flow for installer script #1273 (tamalsaha) 8.0.0 (2018-10-09) Full Changelog
Fixed bugs:</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/welcome/changelog/</guid><description>Change Log 9.0.0 (2019-02-20) Full Changelog
Implemented enhancements:
Mount custom configmap #1304 Fixed bugs:
appscode/oauth2_proxy:2.3.0 is broken #1300 Unavailable services get removed from HAProxy configuration #1285 Closed issues:
Add support for Gandi V5 acme dns provider #1337 Memory and CPU requests for Daemonset? #1335 HAProxy OAuth2 #1329 Do not sort ALPN options #1327 Support Haproxy 1.9.2 and gRPC #1326 503 Service Unavailable #1319 Certificate renew should be configurable #1314 Ingress Configuration with URL Redirection #1307 unsupported LBType LoadBalancer #1297 ingress uses unsupported LBType LoadBalancer #1293 Dependabot couldn&amp;rsquo;t find a Gopkg.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/welcome/changelog/</guid><description>Change Log 10.0.0 (2019-04-28) Full Changelog
Closed issues:
Custom LUA scripts support #1370 9.0.0 fails to install on new GKE cluster #1360 Cannot use voyager/client with client-go collision with vendored packages #1356 Oauth2_Proxy is dead, long live Oauth2_Proxy #1302 Upgrade to HAProxy 1.9.5 #1362 Merged pull requests:
Update Kubernetes client libraries to 1.13.5 #1379 (tamalsaha) Get id-token from Authorization header #1376 (diptadas) Update haproxy version to 1.9.6 #1374 (diptadas) Update haproxy version to 1.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/welcome/changelog/</guid><description>Change Log v11.0.1 (2019-09-20) Full Changelog
Merged pull requests:
Download onessl version v0.13.1 for Kubernetes 1.16 fix #1437 (tamalsaha) Fix broken helm chart: unexpected end definition in cluster-role.yaml #1436 (kirrmann) Templatize front matter #1434 (tamalsaha) v11.0.0 (2019-09-10) Full Changelog
Closed issues:
Integration issue with Jenkins #1403 TLS on backend communication #1401 Remove &amp;ndash;rbac flag #1388 Allow Backend Weight to be 0 #1387 Voyager Let&amp;rsquo;s Encrypt fails when using HTTP-01 challenge with multiple domains #1385 Drain a backend in terminating status?</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/changelog/</guid><description>Change Log v12.0.0-rc.0 (2020-01-03) Full Changelog
Closed issues:
Voyager with GKE HTTP(S) -L7 Load balancer #1453 Voyager Installation Issue #1452 ServiceMonitor endpoint path created with the wrong APISchemaIngress (typo?) #1451 Problem with lets encrypt certificates #1444 Helm Chart v11.0.0 errors on install #1433 Merged pull requests:
Prepare release v12.0.0-rc.0 #1469 (tamalsaha) Fix failed e2e tests #1468 (tamalsaha) Update installation instructions #1467 (tamalsaha) Run e2e tests in minikube #1466 (tamalsaha) Various fixes to chart #1465 (tamalsaha) Delete script based installer #1464 (tamalsaha) Revendor #1463 (tamalsaha) Fix typo for APISchemaIngress #1461 (ttauveron) Use OwnerReference helpers from kmodules #1460 (tamalsaha) Fix helm v3.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/changelog/</guid><description>Change Log Unreleased Full Changelog
Closed issues:
Voyager stops with Fatal #1471 Helm Chart v11.0.1 errors on install #1438 Voyager 10 fails to deploy with Helm installer #1400 RBAC issue with helm install #1333 Merged pull requests:
Exit only if UpdateStatus returns error. #1472 (tamalsaha) v12.0.0-rc.0 (2020-01-03) Full Changelog
Closed issues:
Voyager with GKE HTTP(S) -L7 Load balancer #1453 Voyager Installation Issue #1452 ServiceMonitor endpoint path created with the wrong APISchemaIngress (typo?</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/changelog/</guid><description>Change Log v12.0.0-rc.2 (2020-04-25) Full Changelog
Closed issues:
Voyager operator continue crash forbidden permission #1483 Allow option to set Docker repository for HAProxy and Exporter images #1449 Merged pull requests:
Build HAProxy images from Makefile #1498 (tamalsaha) Use BASH_SOURCE to calculate $REPO_ROOT #1497 (tamalsaha) Update CHANGELOG.md #1496 (tamalsaha) Security: Upgrade to HAProxy 1.19.15 #1495 (tamalsaha) Add rbac permissions for statefulset #1494 (tamalsaha) Apply various fixes to chart #1493 (tamalsaha) Haproxy exporter image repository #1491 (RobertKirk) Add missing ingresses/status resource to operator ClusterRole #1488 (aletundo) Bump cloud.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/welcome/changelog/</guid><description>Change Log v12.0.0 (2020-05-18) Full Changelog
Closed issues:
voyager helm install failed for version v12.0.0-rc.2 #1501 Automatic certificate renewal didn&amp;rsquo;t occur #1443 Merged pull requests:
Fix Update***Status helpers #1505 (tamalsaha) Use recommended kubernetes app labels #1504 (tamalsaha) Correctly load (HAProxy|Exporter)ImageRepository options #1503 (RobertKirk) Change go module to voyagermesh.dev/voyager #1500 (tamalsaha) Update repository location #1499 (tamalsaha) v12.0.0-rc.2 (2020-04-25) Full Changelog
Closed issues:
Voyager operator continue crash forbidden permission #1483 Allow option to set Docker repository for HAProxy and Exporter images #1449 Merged pull requests:</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/changelog/</guid><description>Change Log v13.0.0-beta.0 (2020-05-22) Full Changelog
Closed issues:
README.md documentation links are broken #1506 v12 release? #1492 Merged pull requests:
Prepare release v13.0.0-beta.0 #1510 (tamalsaha) Update to Kubernetes v1.18.3 #1509 (tamalsaha) Fix README.md documentation links #1507 (RobertKirk) v12.0.0 (2020-05-18) Full Changelog
Closed issues:
voyager helm install failed for version v12.0.0-rc.2 #1501 Automatic certificate renewal didn&amp;rsquo;t occur #1443 Merged pull requests:
Fix Update***Status helpers #1505 (tamalsaha) Use recommended kubernetes app labels #1504 (tamalsaha) Correctly load (HAProxy|Exporter)ImageRepository options #1503 (RobertKirk) Change go module to voyagermesh.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/changelog/</guid><description>Change Log v13.0.0-beta.1 (2020-05-26) Full Changelog
Merged pull requests:
Prepare release v13.0.0-beta.1 #1512 (tamalsaha) Generate both v1beta1 and v1 CRD YAML #1511 (tamalsaha) v13.0.0-beta.0 (2020-05-22) Full Changelog
Closed issues:
README.md documentation links are broken #1506 v12 release? #1492 Merged pull requests:
Prepare release v13.0.0-beta.0 #1510 (tamalsaha) Update to Kubernetes v1.18.3 #1509 (tamalsaha) Fix README.md documentation links #1507 (RobertKirk) v12.0.0 (2020-05-18) Full Changelog
Closed issues:</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/changelog-v2021.04.20-beta.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/changelog-v2021.04.20-beta.2/</guid><description>Voyager v2021.04.20-beta.2 (2021-04-25) voyagermesh/installer v2021.04.20-beta.2 37b8597 Prepare for release v2021.04.20-beta.2 (#71) 3a33e2e Update Makefile 9c19ed2 Add voyager-crds chart (#66) 252f14a Add cleaner skip option for YAML installation process (#65) d737d14 Remove protobuf code generator (#64) 6fdc1ca Update repository config (#63) 81c5627 Update Kubernetes v1.18.9 dependencies (#62) acf9453 Update repository config (#61) 9de2b98 Update Kubernetes v1.18.9 dependencies (#60) d2f88f6 Update repository config (#59) 2f97c0d Update repository config (#58) a17dcd6 Update Kubernetes v1.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/changelog-v2021.04.24-rc.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/changelog-v2021.04.24-rc.0/</guid><description>Voyager v2021.04.24-rc.0 (2021-04-25) voyagermesh/installer v2021.04.24-rc.0 7996020 Prepare for release v2021.04.24-rc.0 (#72) 37b8597 Prepare for release v2021.04.20-beta.2 (#71) 3a33e2e Update Makefile 9c19ed2 Add voyager-crds chart (#66) 252f14a Add cleaner skip option for YAML installation process (#65) d737d14 Remove protobuf code generator (#64) 6fdc1ca Update repository config (#63) 81c5627 Update Kubernetes v1.18.9 dependencies (#62) acf9453 Update repository config (#61) 9de2b98 Update Kubernetes v1.18.9 dependencies (#60) d2f88f6 Update repository config (#59) 2f97c0d Update repository config (#58) a17dcd6 Update Kubernetes v1.</description></item><item><title>Changelog | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/changelog/</guid><description>Change Log v13.0.0-beta.1 (2020-05-26) Full Changelog
Merged pull requests:
Prepare release v13.0.0-beta.1 #1512 (tamalsaha) Generate both v1beta1 and v1 CRD YAML #1511 (tamalsaha) v13.0.0-beta.0 (2020-05-22) Full Changelog
Closed issues:
README.md documentation links are broken #1506 v12 release? #1492 Merged pull requests:
Prepare release v13.0.0-beta.0 #1510 (tamalsaha) Update to Kubernetes v1.18.3 #1509 (tamalsaha) Fix README.md documentation links #1507 (RobertKirk) v12.0.0 (2020-05-18) Full Changelog
Closed issues:</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Concepts | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/</guid><description>Concepts Concepts help you learn about the different parts of the Voyager and the abstractions it uses.
Overview. Provides a conceptual introduction to Voyager, including the problems it solves and its high-level architecture.
Types of Ingress
LoadBalancer. Explains how LoadBalancer type Ingress works. NodePort. Explains how NodePort type Ingress works. HostPort. Explains how HostPort type Ingress works. Internal. Explains how Internal type Ingress works.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configuration Volumes</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/config-volumes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/config-volumes/</guid><description>New to Voyager? Please start here.
Configuration Volumes You might want to provide additional files to the haproxy container and use them in the haproxy configuration. For example, specifying a CA file for verifying backend server. Using voyager, you can mount additional files from secrets/configmaps by configuring spec.configVolumes.
Note that, when spec.configVolumes is used, operator will skip the validation for generated haproxy configuration.
Example: Backend Server Verification First create demo namespace for this example.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/dns/external-dns/</guid><description>Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.
apiVersion: voyager.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/dns/external-dns/</guid><description>Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.
apiVersion: voyager.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure External DNS for Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/dns/external-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/dns/external-dns/</guid><description>New to Voyager? Please start here.
Configuring external DNS servers external-dns project can be used to configure external DNS servers for Voyager managed ingresses.
LoadBalancer Ingress For a LoadBalancer type Ingress, apply &amp;quot;external-dns.alpha.kubernetes.io/hostname&amp;quot; annotation on the service that exposes HAProxy pods. This service should have a name like voyager-{ingress-name} in the same namespace of the Ingress object. Since, Voyager uses its own CRD for Ingress, external-dns project must use the service to discover loadbalancer ip.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure HTTP/2 and GRPC | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/http-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/http-2/</guid><description>New to Voyager? Please start here.
Configure HTTP/2 and GRPC You can configure HTTP/2 by configuring proto or, alpn under rules.http section (for frontend) or, backend section (for specific backend). If you want to use only HTTP/2.0, then you can specify it using proto: h2. However, if you like to use both HTTP/2.0 and HTTP/1.1 in a preferred order, then you need to specify the order using ALPN.</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/accept-proxy/</guid><description>Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:
$ kubectl apply -f test-ingress.</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/accept-proxy/</guid><description>Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:
$ kubectl apply -f test-ingress.</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Accept Proxy</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/accept-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/accept-proxy/</guid><description>New to Voyager? Please start here.
Accept Proxy If set to true, enforces the use of the PROXY protocol over any connection accepted by HAProxy. It will add the accept-proxy keyword on the bind line of the generated haproxy.cfg.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/annotations/</guid><description>Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.appscode.com/hsts-max-age string 15768000 ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/annotations/</guid><description>Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.appscode.com/hsts-max-age string 15768000 ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Annotations</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/annotations/</guid><description>New to Voyager? Please start here.
Configure ingress with annotations Below is the full list of supported annotations:
Keys Value Default ingress.appscode.com/type LoadBalancer, HostPort, NodePort, Internal LoadBalancer ingress.appscode.com/api-schema {APIGroup}/{APIVersion} voyager.appscode.com/v1beta1 ingress.appscode.com/accept-proxy bool false ingress.appscode.com/affinity cookie ingress.appscode.com/session-cookie-hash string ingress.appscode.com/session-cookie-name string SERVERID ingress.appscode.com/hsts bool true ingress.appscode.com/hsts-include-subdomains bool false ingress.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/bind-address/</guid><description/></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/bind-address/</guid><description/></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Bind Address</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/bind-address/</guid><description> New to Voyager? Please start here.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/body-size/</guid><description>Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/body-size/</guid><description>Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Body Size</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/body-size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/body-size/</guid><description>New to Voyager? Please start here.
Maximum Body Size You can configure maximum allowed request body size in bytes using ingress.appscode.com/proxy-body-size annotation. It will applied globally for all frontends. If request body size exceeds the specified size then it will through error with code 400.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/proxy-body-size: &amp;#34;8&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following to all frontends in generated haproxy.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/error-files/</guid><description>Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.
Supported commands are: errorfile, errorloc, errorloc302, errorloc303.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/error-files/</guid><description>Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.
Supported commands are: errorfile, errorloc, errorloc302, errorloc303.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Error Files</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/error-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/error-files/</guid><description>New to Voyager? Please start here.
Error Files Using voayger you can configure haproxy to return a file-content or, execute a command instead of returning generated errors. To achieve this you need to create a configmap specifying the file-content or, command for different status codes. Then you have to specify the configmap name using ingress.appscode.com/errorfiles annotation. Then contents of the configmap will be mounted in the haproxy pod in path /srv/voyager/errorfiles.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/keep-source-ip/</guid><description>Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/keep-source-ip/</guid><description>Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Keep Source IP</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/keep-source-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/keep-source-ip/</guid><description>New to Voyager? Please start here.
Keep Source IP You can preserve client source IP by setting annotation ingress.appscode.com/keep-source-ip to true.
For LoadBalancer type ingresses, the actual configuration generated depends on the underlying cloud provider.
GCE, GKE, Azure, ACS: Sets ExternalTrafficPolicy to Local for services used to expose HAProxy. See here. AWS: Enables accept-proxy that enforces the use of the PROXY protocol over any connection accepted by any of the sockets declared on the same line.</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/loadbalancer-ip/</guid><description>LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/loadbalancer-ip/</guid><description>LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Loadbalancer IP</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/loadbalancer-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/loadbalancer-ip/</guid><description> New to Voyager? Please start here.
LoadBalancer IP For LoadBalancer type ingresses, you can specify LoadBalancerIP of HAProxy services using ingress.appscode.com/load-balancer-ip annotation.
Note that, this feature is supported for cloud providers GCE, GKE, Azure, ACS and Openstack.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/load-balancer-ip: &amp;#34;78.11.24.19&amp;#34; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/max-connections/</guid><description>Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/max-connections/</guid><description>Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Max Connections</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/max-connections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/max-connections/</guid><description>New to Voyager? Please start here.
Maximum Connections You can specify the maximum number of concurrent connections through the ingress.appscode.com/max-connections annotation. When applied to ingress, this rule will be applied globally for all backends. To apply for a specific backend, you need to apply the annotation to associated pod.
Ingress Example First create a test-server and expose it via service:
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Then create the ingress:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/pod-annotations/</guid><description>Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:
annotations: bar: foo foo: bar ingress.</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/pod-annotations/</guid><description>Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:
annotations: bar: foo foo: bar ingress.</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Pod Annotations</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/pod-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/pod-annotations/</guid><description>New to Voyager? Please start here.
Pod Annotations You can specify annotations applied to HAProxy pods through ingress annotation ingress.appscode.com/annotations-pod. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-pod: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/rate-limit/</guid><description>Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/rate-limit/</guid><description>Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rate Limit</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/rate-limit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/rate-limit/</guid><description>New to Voyager? Please start here.
Rate limiting You can define a limit on the connections that can be opened by a single client IP address through annotations. This can be used to mitigate DDoS Attacks.
ingress.appscode.com/limit-connection: number of concurrent connections allowed from a single IP address.
ingress.appscode.com/limit-rps: number of connections that may be accepted from a given IP each second.
ingress.appscode.com/limit-rpm: number of connections that may be accepted from a given IP each minute.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/rewrite-target/</guid><description>Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/rewrite-target: &amp;#34;/bar&amp;#34; spec: rules: - host: voyager.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/rewrite-target/</guid><description>Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/rewrite-target: &amp;#34;/bar&amp;#34; spec: rules: - host: voyager.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Rewrite Target</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/rewrite-target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/rewrite-target/</guid><description>New to Voyager? Please start here.
Rewrite Target In some scenarios the exposed URL in the backend service differs from the specified path in the Ingress rule. This will cause any request to return 404. In such scenarios you can set the path expected by the service using ingress.appscode.com/rewrite-target annotation. This will be applied globally for all paths.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/service-annotations/</guid><description>Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:
annotations: bar: foo foo: bar ingress.</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/service-annotations/</guid><description>Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:
annotations: bar: foo foo: bar ingress.</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Service Annotations</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/service-annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/service-annotations/</guid><description>New to Voyager? Please start here.
Service Annotations You can specify annotations applied to HAProxy services through ingress annotation ingress.appscode.com/annotations-service. You have to provide it as a json formatted string to string map.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/annotations-service: &amp;#39;{&amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;bar&amp;#34;:&amp;#34;foo&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 It will add following annotations to HAProxy pods:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/ssl-passthrough/</guid><description>SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used the mode has to be TCP. For more details see here. When ssl-pasthrough is enabled, voyager automatically converts your http rules to tcp rules. Please note that following things are not supported while using ssl-pasthrough:
Multiple paths for http rules.</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/ssl-passthrough/</guid><description>SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used the mode has to be TCP. For more details see here. When ssl-pasthrough is enabled, voyager automatically converts your http rules to tcp rules. Please note that following things are not supported while using ssl-pasthrough:
Multiple paths for http rules.</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used the mode has to be TCP. For more details see here. When ssl-pasthrough is enabled, voyager automatically converts your http rules to tcp rules. Please note that following things are not supported while using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Passthrough</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/ssl-passthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/ssl-passthrough/</guid><description>New to Voyager? Please start here.
SSL Passthrough The annotation ingress.appscode.com/ssl-passthrough allows to configure TLS termination in the backend and not in haproxy. When set to true, passes TLS connections directly to backend.
If ssl-passthrough is used, HAProxy will use tcp. For more details see here. When ssl-pasthrough is enabled, Voyager automatically converts your HTTP ingress rules to TCP rules.
Please note that following features are not supported when using ssl-pasthrough:</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/ssl-redirect/</guid><description>SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.appscode.com/force-ssl-redirect: &amp;quot;true&amp;quot; annotation. It will redirect for all port 80 HTTP paths to HTTPS.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/ssl-redirect/</guid><description>SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.appscode.com/force-ssl-redirect: &amp;quot;true&amp;quot; annotation. It will redirect for all port 80 HTTP paths to HTTPS.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Ssl Redirect</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/ssl-redirect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/ssl-redirect/</guid><description>New to Voyager? Please start here.
SSL Redirect By default voyager redirects (301) to HTTPS if TLS is enabled for that ingress. If you want to disable that behavior globally, you can use ingress.appscode.com/ssl-redirect: &amp;quot;false&amp;quot; annotation.
When using SSL offloading outside of cluster (e.g. AWS ELB) it may be useful to enforce a redirect to HTTPS even when there is not TLS cert available. This can be achieved by using the ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/whitelist/</guid><description>Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/whitelist-source-range: &amp;#34;192.168.20.0/24 192.168.10.3&amp;#34; spec: rules: - host: voyager.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/whitelist/</guid><description>Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/whitelist-source-range: &amp;#34;192.168.20.0/24 192.168.10.3&amp;#34; spec: rules: - host: voyager.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Configure Ingress Whitelist</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/whitelist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/whitelist/</guid><description>New to Voyager? Please start here.
Whitelist Source Range You can specify the allowed client IP source ranges through the ingress.appscode.com/whitelist-source-range annotation. The value is a space separated list of CIDRs, e.g. 192.168.20.0/24 192.168.10.3. This rule will be applied globally for all frontends. To apply for a specific frontend, you need to manually add src acl using frontend-rules.
Ingress Example apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>Contributing | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/contributing/</guid><description>Contribution Guidelines Want to hack on Voyager?
AppsCode projects are Apache 2.0 licensed and accept contributions via GitHub pull requests. This document outlines some of the conventions on development workflow, commit message formatting, contact points and other resources to make it easier to get your contribution accepted.
Certificate of Origin By contributing to this project you agree to the Developer Certificate of Origin (DCO). This document was created by the Linux Kernel community and is a simple statement that you, as a contributor, have the legal right to make the contribution.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/cors/</guid><description>CORS Applying ingress.kubenretes.io/enable-cors annotation in ingress enables CORS for all HTTP Frontend.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotation: ingress.kubernetes.io/enable-cors: &amp;#39;true&amp;#39; spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.foo.com http: paths: - backend: serviceName: s2 servicePort: &amp;#39;80&amp;#39; Applying the annotation in ingress will have the following effects, will add the CORS Header in the response.
$ curl -v -X 'GET' -k -H 'Origin: foo.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/cors/</guid><description>CORS Applying ingress.kubenretes.io/enable-cors annotation in ingress enables CORS for all HTTP Frontend.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotation: ingress.kubernetes.io/enable-cors: &amp;#39;true&amp;#39; spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.foo.com http: paths: - backend: serviceName: s2 servicePort: &amp;#39;80&amp;#39; Applying the annotation in ingress will have the following effects, will add the CORS Header in the response.
$ curl -v -X 'GET' -k -H 'Origin: foo.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/cors/</guid><description>CORS Applying ingress.kubenretes.io/enable-cors annotation in ingress enables CORS for all HTTP Frontend.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotation: ingress.kubernetes.io/enable-cors: &amp;#39;true&amp;#39; spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.foo.com http: paths: - backend: serviceName: s2 servicePort: &amp;#39;80&amp;#39; Applying the annotation in ingress will have the following effects, will add the CORS Header in the response.
$ curl -v -X 'GET' -k -H 'Origin: foo.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/cors/</guid><description>CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *. Ingress Example First create a test-server and expose it via service:</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/cors/</guid><description>CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *. Ingress Example First create a test-server and expose it via service:</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>CORS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/cors/</guid><description>New to Voyager? Please start here.
CORS Voyager can enable and configure CORS for all HTTP frontends via following ingress annotations:
ingress.appscode.com/enable-cors: If set to true enables CORS for all HTTP Frontend. By default CORS is disabled. ingress.appscode.com/cors-allow-headers: Specifies allowed headers when CORS enabled. Default value is DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization. ingress.appscode.com/cors-allow-methods: Specifies allowed methods when CORS enabled. Default value is GET,PUT,POST,DELETE,PATCH,OPTIONS. ingress.appscode.com/cors-allow-origin: Specifies allowed origins when CORS enabled. Default value is *.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/custom-http-port/</guid><description>Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/custom-http-port/</guid><description>Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/custom-http-port/</guid><description>Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/custom-http-port/</guid><description>Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/custom-http-port/</guid><description>Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Custom HTTP Port | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/custom-http-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/custom-http-port/</guid><description>New to Voyager? Please start here.
Custom HTTP Port Voyager 3.2+ supports using any non-standard port (beyond 80 and 443) for L7 traffic. If no port is specified, port 80 or 443 will be used depending on whether TLS is used or not.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: one.example.com http: port: &amp;#39;8989&amp;#39; paths: - path: /admin backend: serviceName: admin-service servicePort: &amp;#39;80&amp;#39; - path: / backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; - host: other.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/default-timeouts/</guid><description>Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;5s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;10s&amp;#34;}&amp;#39; spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This ingress will generate a HAProxy template with provided timeouts.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/default-timeouts/</guid><description>Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;5s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;10s&amp;#34;}&amp;#39; spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This ingress will generate a HAProxy template with provided timeouts.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/default-timeouts/</guid><description>Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;5s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;10s&amp;#34;}&amp;#39; spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This ingress will generate a HAProxy template with provided timeouts.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/default-timeouts/</guid><description>Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 Generated haproxy.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/default-timeouts/</guid><description>Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.appscode.test http: paths: - path: /foo backend: serviceName: test-server servicePort: 80 Generated haproxy.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/default-timeouts/</guid><description>New to Voyager? Please start here.
Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values. Valid map keys are connect, server, client, client-fin and tunnel.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;15s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;20s&amp;#34;}&amp;#39; spec: rules: - host: voyager.</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/default-options/</guid><description>Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotaiotns liek below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-options: &amp;#39;{&amp;#34;http-keep-alive&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;dontlognull&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;clitcpka&amp;#34;: &amp;#34;false&amp;#34;}&amp;#39; spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; rules: - host: appscode.</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/default-options/</guid><description>Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotaiotns liek below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-options: &amp;#39;{&amp;#34;http-keep-alive&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;dontlognull&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;clitcpka&amp;#34;: &amp;#34;false&amp;#34;}&amp;#39; spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; rules: - host: appscode.</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/default-options/</guid><description>Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotaiotns liek below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-options: &amp;#39;{&amp;#34;http-keep-alive&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;dontlognull&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;clitcpka&amp;#34;: &amp;#34;false&amp;#34;}&amp;#39; spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; rules: - host: appscode.</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/default-options/</guid><description>Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/default-options/</guid><description>Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/default-options/</guid><description>New to Voyager? Please start here.
Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotations like below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka If you don&amp;rsquo;t set the annotation {&amp;quot;http-server-close&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;} will be considered as default value</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/delete/</guid><description>Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/certificate/delete/</guid><description>Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/delete/</guid><description>Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/delete/</guid><description>Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/delete/</guid><description>Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/certificate/delete/</guid><description> New to Voyager? Please start here.
Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/delete/</guid><description> New to Voyager? Please start here.
Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/delete/</guid><description> New to Voyager? Please start here.
Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/delete/</guid><description> New to Voyager? Please start here.
Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/delete/</guid><description> New to Voyager? Please start here.
Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/certificate/delete/</guid><description> New to Voyager? Please start here.
Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/certificate/delete/</guid><description> New to Voyager? Please start here.
Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/certificate/delete/</guid><description> New to Voyager? Please start here.
Deleting Certificate Deleting a Kubernetes Certificate object will only delete the certificate CRD from Kubernetes. It will not delete the obtained certificate and user account secret from Kubernetes. User have to manually delete these secrets for complete cleanup.
Delete Certificate crd. kubectl delete certificate.voyager.appscode.com test-cert Delete Obtained Let&amp;rsquo;s Encrypt tls certificate kubectl delete secret tls-test-cert Delete Let&amp;rsquo;s Encrypt user account Secret kubectl delete secret test-user-secret</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Delete Certificate | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/delete/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/delete/</guid><description>New to Voyager? Please start here.
Deleting Certificate Pausing Certificte Voyager operator periodically (default 5 mins) checks each certificate whether whether it needs to be reissued. If you have a bad configuration (example, bad dns credentials), this can led to rate limit issued with Let&amp;rsquo;s Encrypt. You can delete the certificate object to stop retries. Alternatively, you can mark the certificate object as spec.paused: true. This will cause Voyager operator to skip checking this certificate for renewals.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/monitoring/stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/monitoring/stats/</guid><description>Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Stats annotations Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Optional. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint. Secret must contain keys username and password ingress.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/monitoring/stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/monitoring/stats/</guid><description>Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Stats annotations Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Optional. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint. Secret must contain keys username and password ingress.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/monitoring/stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/monitoring/stats/</guid><description>Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Stats annotations Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Optional. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint. Secret must contain keys username and password ingress.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/monitoring/haproxy-stats/</guid><description>Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint. Secret must contain keys username and password If ingress.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/monitoring/haproxy-stats/</guid><description>Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint. Secret must contain keys username and password If ingress.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing HAProxy Stats</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/haproxy-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/haproxy-stats/</guid><description>New to Voyager? Please start here.
Exposing HAProxy Stats To expose HAProxy stats, please use the following annotations:
Keys Value Default Description ingress.appscode.com/stats bool &amp;quot;false&amp;quot; Required. If set, HAProxy stats will be exposed ingress.appscode.com/stats-port integer &amp;quot;56789&amp;quot; Optional. Port used to expose HAProxy stats ingress.appscode.com/stats-secret-name string x Optional. Secret used to provide username &amp;amp; password to secure HAProxy stats endpoint.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/single-service/</guid><description>Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally. The loadbalancer ip can be found inside Status Field of the loadbalancer described response.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/single-service/</guid><description>Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally. The loadbalancer ip can be found inside Status Field of the loadbalancer described response.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/single-service/</guid><description>Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally. The loadbalancer ip can be found inside Status Field of the loadbalancer described response.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/single-service/</guid><description>Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally. The loadbalancer ip can be found inside Status Field of the loadbalancer described response.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/single-service/</guid><description>Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally. The loadbalancer ip can be found inside Status Field of the loadbalancer described response.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-server service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: 80 This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: 80 This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: 80 This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: 80 This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: 80 This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: 80 This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: 80 This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: 80 This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Exposing Service | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/single-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/single-service/</guid><description>New to Voyager? Please start here.
Exposing Service via Ingress There are existing Kubernetes concepts which allows you to expose a single service. However, you can do so through an AppsCode Ingress as well, simply by specifying a default backend with no rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: backend: serviceName: test-service servicePort: 80 This will create a load balancer forwarding all traffic to test-service service, unconditionally.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/statefulset-pod/</guid><description>Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.io/google_containers/nginx-slim:0.8 ports: - containerPort: 80 name: http ---- apiVersion: v1 kind: Service metadata: name: nginx-set labels: app: nginx spec: ports: - port: 80 name: http clusterIP: None selector: app: nginx Create another service for StatefulSets pods with selector.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/statefulset-pod/</guid><description>Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.io/google_containers/nginx-slim:0.8 ports: - containerPort: 80 name: http ---- apiVersion: v1 kind: Service metadata: name: nginx-set labels: app: nginx spec: ports: - port: 80 name: http clusterIP: None selector: app: nginx Create another service for StatefulSets pods with selector.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/statefulset-pod/</guid><description>Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.io/google_containers/nginx-slim:0.8 ports: - containerPort: 80 name: http ---- apiVersion: v1 kind: Service metadata: name: nginx-set labels: app: nginx spec: ports: - port: 80 name: http clusterIP: None selector: app: nginx Create another service for StatefulSets pods with selector.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/statefulset-pod/</guid><description>Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.io/google_containers/nginx-slim:0.8 ports: - containerPort: 80 name: http ---- apiVersion: v1 kind: Service metadata: name: nginx-set labels: app: nginx spec: ports: - port: 80 name: http clusterIP: None selector: app: nginx Create another service for StatefulSets pods with selector.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/statefulset-pod/</guid><description>Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.io/google_containers/nginx-slim:0.8 ports: - containerPort: 80 name: http ---- apiVersion: v1 kind: Service metadata: name: nginx-set labels: app: nginx spec: ports: - port: 80 name: http clusterIP: None selector: app: nginx Create another service for StatefulSets pods with selector.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1beta1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1 kind: StatefulSet metadata: name: http spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Forward Traffic to StatefulSet Pods | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/statefulset-pod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/statefulset-pod/</guid><description>New to Voyager? Please start here.
Forward Traffic to StatefulSet Forward Traffic to all Pods of a StatefulSet There is the usual way of forwarding traffic to a Service matching a StatefulSet. Create a Service with the pods label selector as selector, and use the service name as Backend ServiceName.
apiVersion: apps/v1 kind: StatefulSet metadata: name: http namespace: default spec: serviceName: &amp;#34;nginx-set&amp;#34; replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: gcr.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/frontend-rule/</guid><description>Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: frontendRules: - port: 80 # Applies all the rule in frontend section for port 80 rules: - timeout client 5s # Set the maximum inactivity time on the client side.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/frontend-rule/</guid><description>Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: frontendRules: - port: 80 # Applies all the rule in frontend section for port 80 rules: - timeout client 5s # Set the maximum inactivity time on the client side.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/frontend-rule/</guid><description>Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: frontendRules: - port: 80 # Applies all the rule in frontend section for port 80 rules: - timeout client 5s # Set the maximum inactivity time on the client side.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/frontend-rule/</guid><description>Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: frontendRules: - port: 80 # Applies all the rule in frontend section for port 80 rules: - timeout client 5s # Set the maximum inactivity time on the client side.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/frontend-rule/</guid><description>Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: frontendRules: - port: 80 # Applies all the rule in frontend section for port 80 rules: - timeout client 5s # Set the maximum inactivity time on the client side.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/frontend-rule/</guid><description>New to Voyager? Please start here.
Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.</description></item><item><title>Get Started with cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/get-started/</guid><description>New to Voyager? Please start here.
1. Install Cert-Manager https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
kubectl create namespace cert-manager kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml Add --validate=false to the last command if your kubectl version is &amp;lt;= v1.12, like this:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml --validate=false 2. Setup Issuer/ClusterIssuer Supported Issuer These are the supported Certificate Issuers:
acme ca self signed vault venafi Here we will show issuing certificates from Let&amp;rsquo;s Encrypt using ACME protocol.</description></item><item><title>Get Started with cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/get-started/</guid><description>New to Voyager? Please start here.
1. Install Cert-Manager https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
kubectl create namespace cert-manager kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml Add --validate=false to the last command if your kubectl version is &amp;lt;= v1.12, like this:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml --validate=false 2. Setup Issuer/ClusterIssuer Supported Issuer These are the supported Certificate Issuers:
acme ca self signed vault venafi Here we will show issuing certificates from Let&amp;rsquo;s Encrypt using ACME protocol.</description></item><item><title>Get Started with cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/get-started/</guid><description>New to Voyager? Please start here.
1. Install Cert-Manager https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
kubectl create namespace cert-manager kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml Add --validate=false to the last command if your kubectl version is &amp;lt;= v1.12, like this:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml --validate=false 2. Setup Issuer/ClusterIssuer Supported Issuer These are the supported Certificate Issuers:
acme ca self signed vault venafi Here we will show issuing certificates from Let&amp;rsquo;s Encrypt using ACME protocol.</description></item><item><title>Get Started with cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/get-started/</guid><description>New to Voyager? Please start here.
1. Install Cert-Manager https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
kubectl create namespace cert-manager kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml Add --validate=false to the last command if your kubectl version is &amp;lt;= v1.12, like this:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml --validate=false 2. Setup Issuer/ClusterIssuer Supported Issuer These are the supported Certificate Issuers:
acme ca self signed vault venafi Here we will show issuing certificates from Let&amp;rsquo;s Encrypt using ACME protocol.</description></item><item><title>Get Started with cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/get-started/</guid><description>New to Voyager? Please start here.
1. Install Cert-Manager https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
kubectl create namespace cert-manager kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml Add --validate=false to the last command if your kubectl version is &amp;lt;= v1.12, like this:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml --validate=false 2. Setup Issuer/ClusterIssuer Supported Issuer These are the supported Certificate Issuers:
acme ca self signed vault venafi Here we will show issuing certificates from Let&amp;rsquo;s Encrypt using ACME protocol.</description></item><item><title>Get Started with cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/get-started/</guid><description>New to Voyager? Please start here.
1. Install Cert-Manager https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
kubectl create namespace cert-manager kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml Add --validate=false to the last command if your kubectl version is &amp;lt;= v1.12, like this:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml --validate=false 2. Setup Issuer/ClusterIssuer Supported Issuer These are the supported Certificate Issuers:
acme ca self signed vault venafi Here we will show issuing certificates from Let&amp;rsquo;s Encrypt using ACME protocol.</description></item><item><title>Get Started with cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/get-started/</guid><description>New to Voyager? Please start here.
1. Install Cert-Manager https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
kubectl create namespace cert-manager kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml Add --validate=false to the last command if your kubectl version is &amp;lt;= v1.12, like this:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml --validate=false 2. Setup Issuer/ClusterIssuer Supported Issuer These are the supported Certificate Issuers:
acme ca self signed vault venafi Here we will show issuing certificates from Let&amp;rsquo;s Encrypt using ACME protocol.</description></item><item><title>Get Started with cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/get-started/</guid><description>New to Voyager? Please start here.
1. Install Cert-Manager https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
kubectl create namespace cert-manager kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml Add --validate=false to the last command if your kubectl version is &amp;lt;= v1.12, like this:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml --validate=false 2. Setup Issuer/ClusterIssuer Supported Issuer These are the supported Certificate Issuers:
acme ca self signed vault venafi Here we will show issuing certificates from Let&amp;rsquo;s Encrypt using ACME protocol.</description></item><item><title>Get Started with cert-manager | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/get-started/</guid><description>New to Voyager? Please start here.
1. Install Cert-Manager https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html
kubectl create namespace cert-manager kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml Add --validate=false to the last command if your kubectl version is &amp;lt;= v1.12, like this:
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.10.0/cert-manager.yaml --validate=false 2. Setup Issuer/ClusterIssuer Supported Issuer These are the supported Certificate Issuers:
acme ca self signed vault venafi Here we will show issuing certificates from Let&amp;rsquo;s Encrypt using ACME protocol.</description></item><item><title>Hard Stop After | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/hard-stop-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/hard-stop-after/</guid><description>New to Voyager? Please start here.
Hard Stop After [ingress.appscode.com/hard-stop-after] annotation defines the maximum duration an old haproxy configuration process may exist after configuration reload (e.g. any change in your ingress or backend service or deployment that invokes haproxy configuration change). Note that, this old configuration won&amp;rsquo;t accept any new requests. It only holds importance if there are existing connections that haven&amp;rsquo;t finished serving. If not mentioned, it will have 30s as default value.</description></item><item><title>Hard Stop After | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/hard-stop-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/hard-stop-after/</guid><description>New to Voyager? Please start here.
Hard Stop After [ingress.appscode.com/hard-stop-after] annotation defines the maximum duration an old haproxy configuration process may exist after configuration reload (e.g. any change in your ingress or backend service or deployment that invokes haproxy configuration change). Note that, this old configuration won&amp;rsquo;t accept any new requests. It only holds importance if there are existing connections that haven&amp;rsquo;t finished serving. If not mentioned, it will have 30s as default value.</description></item><item><title>Hard Stop After | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/hard-stop-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/hard-stop-after/</guid><description>New to Voyager? Please start here.
Hard Stop After [ingress.appscode.com/hard-stop-after] annotation defines the maximum duration an old haproxy configuration process may exist after configuration reload (e.g. any change in your ingress or backend service or deployment that invokes haproxy configuration change). Note that, this old configuration won&amp;rsquo;t accept any new requests. It only holds importance if there are existing connections that haven&amp;rsquo;t finished serving. If not mentioned, it will have 30s as default value.</description></item><item><title>Hard Stop After | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/hard-stop-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/hard-stop-after/</guid><description>New to Voyager? Please start here.
Hard Stop After [ingress.appscode.com/hard-stop-after] annotation defines the maximum duration an old haproxy configuration process may exist after configuration reload (e.g. any change in your ingress or backend service or deployment that invokes haproxy configuration change). Note that, this old configuration won&amp;rsquo;t accept any new requests. It only holds importance if there are existing connections that haven&amp;rsquo;t finished serving. If not mentioned, it will have 30s as default value.</description></item><item><title>Hard Stop After | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/hard-stop-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/hard-stop-after/</guid><description>New to Voyager? Please start here.
Hard Stop After [ingress.appscode.com/hard-stop-after] annotation defines the maximum duration an old haproxy configuration process may exist after configuration reload (e.g. any change in your ingress or backend service or deployment that invokes haproxy configuration change). Note that, this old configuration won&amp;rsquo;t accept any new requests. It only holds importance if there are existing connections that haven&amp;rsquo;t finished serving. If not mentioned, it will have 30s as default value.</description></item><item><title>Hard Stop After | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/hard-stop-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/hard-stop-after/</guid><description>New to Voyager? Please start here.
Hard Stop After [ingress.appscode.com/hard-stop-after] annotation defines the maximum duration an old haproxy configuration process may exist after configuration reload (e.g. any change in your ingress or backend service or deployment that invokes haproxy configuration change). Note that, this old configuration won&amp;rsquo;t accept any new requests. It only holds importance if there are existing connections that haven&amp;rsquo;t finished serving. If not mentioned, it will have 30s as default value.</description></item><item><title>Hard Stop After | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/hard-stop-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/hard-stop-after/</guid><description>New to Voyager? Please start here.
Hard Stop After [ingress.appscode.com/hard-stop-after] annotation defines the maximum duration an old haproxy configuration process may exist after configuration reload (e.g. any change in your ingress or backend service or deployment that invokes haproxy configuration change). Note that, this old configuration won&amp;rsquo;t accept any new requests. It only holds importance if there are existing connections that haven&amp;rsquo;t finished serving. If not mentioned, it will have 30s as default value.</description></item><item><title>Hard Stop After | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/hard-stop-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/hard-stop-after/</guid><description>New to Voyager? Please start here.
Hard Stop After [ingress.appscode.com/hard-stop-after] annotation defines the maximum duration an old haproxy configuration process may exist after configuration reload (e.g. any change in your ingress or backend service or deployment that invokes haproxy configuration change). Note that, this old configuration won&amp;rsquo;t accept any new requests. It only holds importance if there are existing connections that haven&amp;rsquo;t finished serving. If not mentioned, it will have 30s as default value.</description></item><item><title>Hard Stop After | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/hard-stop-after/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/hard-stop-after/</guid><description>New to Voyager? Please start here.
Hard Stop After [ingress.appscode.com/hard-stop-after] annotation defines the maximum duration an old haproxy configuration process may exist after configuration reload (e.g. any change in your ingress or backend service or deployment that invokes haproxy configuration change). Note that, this old configuration won&amp;rsquo;t accept any new requests. It only holds importance if there are existing connections that haven&amp;rsquo;t finished serving. If not mentioned, it will have 30s as default value.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/rewrite-rules/</guid><description>Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRule: - X-Forwarded-Host %[base] rewriteRule: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/rewrite-rules/</guid><description>Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRule: - X-Forwarded-Host %[base] rewriteRule: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/rewrite-rules/</guid><description>Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRule: - X-Forwarded-Host %[base] rewriteRule: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/rewrite-rules/</guid><description>Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRule: - X-Forwarded-Host %[base] rewriteRule: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/rewrite-rules/</guid><description>Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRule: - X-Forwarded-Host %[base] rewriteRule: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>Header and URL Rewriting | Voayger</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/rewrite-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/rewrite-rules/</guid><description>New to Voyager? Please start here.
Header and URL Rewriting AppsCode Ingress support header and URL modification at the loadbalancer level. To ensure simplicity, the header and rewrite rules follow the HAProxy syntax as it is. To add some rewrite rules for a HTTP path, follow the example below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; headerRules: - X-Forwarded-Host %[base] rewriteRules: - &amp;#34;^([^\\ :]*)\\ /(.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/10.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/ingress-types/hostport/</guid><description>HostdePort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/ingress-types/hostport/</guid><description>HostdePort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.3/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.2.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.3.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.4.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/9.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.
curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.
curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.
curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.
curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.
curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.
curl -fsSL https://raw.</description></item><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.
curl -fsSL https://raw.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/hsts/</guid><description>HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.
The HSTS Policy is communicated by the server to the user agent via an HTTPS response header field named &amp;ldquo;Strict-Transport-Security&amp;rdquo;.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/hsts/</guid><description>HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.
The HSTS Policy is communicated by the server to the user agent via an HTTPS response header field named &amp;ldquo;Strict-Transport-Security&amp;rdquo;.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/hsts/</guid><description>HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.
The HSTS Policy is communicated by the server to the user agent via an HTTPS response header field named &amp;ldquo;Strict-Transport-Security&amp;rdquo;.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/hsts/</guid><description>HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.
The HSTS Policy is communicated by the server to the user agent via an HTTPS response header field named &amp;ldquo;Strict-Transport-Security&amp;rdquo;.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/hsts/</guid><description>HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.
The HSTS Policy is communicated by the server to the user agent via an HTTPS response header field named &amp;ldquo;Strict-Transport-Security&amp;rdquo;.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HSTS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/hsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/hsts/</guid><description>New to Voyager? Please start here.
HSTS HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=7.0.0-rc.2
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=7.0.0-rc.3
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=7.0.0
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=7.1.0
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=7.1.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=7.2.0
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=7.3.0
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=7.4.0
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.0
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>HTTP2 | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/http2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/http2/</guid><description>New to Voyager? Please start here.
Enable HTTP/2 on ingress resource Voyager can enable HTTP/2 from version &amp;gt;=8.0.1
To enable http2, you must first setup a certificate (Let&amp;rsquo;s Encrypt), or use an existing one. Then create an ingress object like below:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: haproxy-ingress # name of the ingress namespace: default # namespace (optional) annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; # ... other annotations spec: tls: - hosts: - host.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Ingress | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/</guid><description>Guides Guides show you how to use Voyager as a Kubernetes Ingress controller.
HTTP Exposing Service via Ingress Virtual Hosting Supports Loadbalancer Source Range URL and Request Header Re-writing Enable CORS Custom HTTP Port Using External Service as Ingress Backend HSTS Forward Traffic to StatefulSet Pods Configure Sticky session to Backends Blue Green Deployments using weighted Loadbalancing TLS/SSL TLS Termination Multiple TLS Entries Backend TLS Supports AWS certificate manager TCP TCP LoadBalancing TCP SNI Configuration Customize generated HAProxy config via BackendRule (can be used for http rewriting, add health checks, etc.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/10.0.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/setup/install/</guid><description>Installation Guide Using YAML Voyager can be installed via installer script included in the /hack/deploy folder.
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0-rc.11/hack/deploy/voyager.sh | bash -s -- -h voyager.sh - install voyager operator voyager.sh [options] options: -h, --help show brief help -n, --namespace=NAMESPACE specify namespace (default: kube-system) -p, --provider=PROVIDER specify a cloud provider --rbac create RBAC roles and bindings --restrict-to-namespace restrict voyager to its own namespace --run-on-master run voyager operator on master --template-cfgmap=CONFIGMAP name of configmap with custom templates # install without RBAC roles $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/5.0.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/setup/install/</guid><description>Installation Guide Using YAML Voyager can be installed via installer script included in the /hack/deploy folder.
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0/hack/deploy/voyager.sh | bash -s -- -h voyager.sh - install voyager operator voyager.sh [options] options: -h, --help show brief help -n, --namespace=NAMESPACE specify namespace (default: kube-system) -p, --provider=PROVIDER specify a cloud provider --rbac create RBAC roles and bindings --restrict-to-namespace restrict voyager to its own namespace --run-on-master run voyager operator on master --template-cfgmap=CONFIGMAP name of configmap with custom templates # install without RBAC roles $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/setup/install/</guid><description>Installation Guide Using YAML Voyager can be installed via installer script included in the /hack/deploy folder.
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.0/hack/deploy/voyager.sh | bash -s -- -h voyager.sh - install voyager operator voyager.sh [options] options: -h, --help show brief help -n, --namespace=NAMESPACE specify namespace (default: kube-system) -p, --provider=PROVIDER specify a cloud provider --rbac create RBAC roles and bindings --docker-registry docker registry used to pull voyager images (default: appscode) --image-pull-secret name of secret used to pull voyager operator images --restrict-to-namespace restrict voyager to its own namespace --run-on-master run voyager operator on master --enable-admission-webhook configure admission webhook for Voyager CRDs --template-cfgmap=CONFIGMAP name of configmap with custom templates # install without RBAC roles $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/setup/install/</guid><description>Installation Guide Using YAML Voyager can be installed via installer script included in the /hack/deploy folder.
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.1/hack/deploy/voyager.sh | bash -s -- -h voyager.sh - install voyager operator voyager.sh [options] options: -h, --help show brief help -n, --namespace=NAMESPACE specify namespace (default: kube-system) -p, --provider=PROVIDER specify a cloud provider --rbac create RBAC roles and bindings --docker-registry docker registry used to pull voyager images (default: appscode) --image-pull-secret name of secret used to pull voyager operator images --restrict-to-namespace restrict voyager to its own namespace --run-on-master run voyager operator on master --enable-admission-webhook configure admission webhook for Voyager CRDs --template-cfgmap=CONFIGMAP name of configmap with custom templates # install without RBAC roles $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/setup/install/</guid><description>Installation Guide Using YAML Voyager can be installed via installer script included in the /hack/deploy folder.
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.2/hack/deploy/voyager.sh | bash -s -- -h voyager.sh - install voyager operator voyager.sh [options] options: -h, --help show brief help -n, --namespace=NAMESPACE specify namespace (default: kube-system) -p, --provider=PROVIDER specify a cloud provider --rbac create RBAC roles and bindings (default: true) --docker-registry docker registry used to pull voyager images (default: appscode) --image-pull-secret name of secret used to pull voyager operator images --restrict-to-namespace restrict voyager to its own namespace --run-on-master run voyager operator on master --enable-admission-webhook configure admission webhook for Voyager CRDs --template-cfgmap=CONFIGMAP name of configmap with custom templates $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/6.0.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=$provider After successful installation, you should have a voyager-operator-*** pod running in the kube-system namespace.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=$provider After successful installation, you should have a voyager-operator-*** pod running in the kube-system namespace.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=$provider After successful installation, you should have a voyager-operator-*** pod running in the kube-system namespace.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=$provider After successful installation, you should have a voyager-operator-*** pod running in the kube-system namespace.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.3/hack/deploy/voyager.sh \ | bash -s -- --provider=$provider After successful installation, you should have a voyager-operator-*** pod running in the kube-system namespace.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.0.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=$provider After successful installation, you should have a voyager-operator-*** pod running in the kube-system namespace.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.1.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.1.1/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.2.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.3.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/7.4.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/8.0.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/8.0.1/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/9.0.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Script Helm Using Script To install Voyager in your Kubernetes cluster, pick the appropriate cluster provider and run the following command:
# provider=acs # provider=aks # provider=aws # provider=azure # provider=baremetal # provider=gce # provider=gke # provider=minikube # provider=openstack # provider=metallb # provider=digitalocean # provider=linode $ curl -fsSL https://raw.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Helm 3 (Recommended) Helm 2 YAML Using Helm 3 Voyager can be installed via Helm 3.x or later versions using the chart from AppsCode Charts Repository. To install the chart with the release name my-release:
$ helm repo add appscode https://charts.appscode.com/stable/ $ helm repo update $ helm search repo appscode/voyager NAME CHART VERSION APP VERSION DESCRIPTION appscode/voyager v12.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Helm 3 (Recommended) Helm 2 YAML Using Helm 3 Voyager can be installed via Helm 3.x or later versions using the chart from AppsCode Charts Repository. To install the chart with the release name my-release:
$ helm repo add appscode https://charts.appscode.com/stable/ $ helm repo update $ helm search repo appscode/voyager --version v12.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Helm 3 (Recommended) Helm 2 YAML Using Helm 3 Voyager can be installed via Helm 3.x or later versions using the chart from AppsCode Charts Repository. To install the chart with the release name my-release:
$ helm repo add appscode https://charts.appscode.com/stable/ $ helm repo update $ helm search repo appscode/voyager --version v12.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Helm 3 (Recommended) Helm 2 YAML Using Helm 3 Voyager can be installed via Helm 3.x or later versions using the chart from AppsCode Charts Repository. To install the chart with the release name my-release:
$ helm repo add appscode https://charts.appscode.com/stable/ $ helm repo update $ helm search repo appscode/voyager --version v12.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Helm 3 (Recommended) Helm 2 YAML Using Helm 3 Voyager can be installed via Helm 3.x or later versions using the chart from AppsCode Charts Repository. To install the chart with the release name my-release:
$ helm repo add appscode https://charts.appscode.com/stable/ $ helm repo update $ helm search repo appscode/voyager --version v13.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide Voyager operator can be installed via a script or as a Helm chart.
Helm 3 (Recommended) Helm 2 YAML Using Helm 3 Voyager can be installed via Helm 3.x or later versions using the chart from AppsCode Charts Repository. To install the chart with the release name my-release:
$ helm repo add appscode https://charts.appscode.com/stable/ $ helm repo update $ helm search repo appscode/voyager --version v13.</description></item><item><title>Install Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/install/</guid><description>New to Voyager? Please start here.
Installation Guide To use the Voyager, you can grab 1 year free license from here. After that, you can issue another license for one more year. Typically we release a new version of the operator at least quarterly. So, you can just grab a new license every time you upgrade the operator.
Get a License In this section, we are going to show you how you can get a 1 year free license for the Voyager Community edition.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, install Voyager operator in your cluster following the steps here.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, install Voyager operator in your cluster following the steps here.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, install Voyager operator in your cluster following the steps here.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, install Voyager operator in your cluster following the steps here.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, install Voyager operator in your cluster following the steps here.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, install Voyager operator in your cluster following the steps here.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using Amazon Route53</title><link>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/dns01_challenge/aws-route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/dns01_challenge/aws-route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Amazon Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Amazon Route53.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to IAM page and create a user
Click on next and select Attach existing policies directly and click on Create Policy.</description></item><item><title>Issue Let's Encrypt certificate using Amazon Route53</title><link>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/dns01_challenge/aws-route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/dns01_challenge/aws-route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Amazon Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Amazon Route53.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to IAM page and create a user
Click on next and select Attach existing policies directly and click on Create Policy.</description></item><item><title>Issue Let's Encrypt certificate using Amazon Route53</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/dns01_challenge/aws-route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/dns01_challenge/aws-route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Amazon Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Amazon Route53.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to IAM page and create a user
Click on next and select Attach existing policies directly and click on Create Policy.</description></item><item><title>Issue Let's Encrypt certificate using Amazon Route53</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/dns01_challenge/aws-route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/dns01_challenge/aws-route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Amazon Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Amazon Route53.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to IAM page and create a user
Click on next and select Attach existing policies directly and click on Create Policy.</description></item><item><title>Issue Let's Encrypt certificate using Amazon Route53</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/dns01_challenge/aws-route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/dns01_challenge/aws-route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Amazon Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Amazon Route53.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to IAM page and create a user
Click on next and select Attach existing policies directly and click on Create Policy.</description></item><item><title>Issue Let's Encrypt certificate using Amazon Route53</title><link>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/dns01_challenge/aws-route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/dns01_challenge/aws-route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Amazon Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Amazon Route53.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to IAM page and create a user
Click on next and select Attach existing policies directly and click on Create Policy.</description></item><item><title>Issue Let's Encrypt certificate using Amazon Route53</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/dns01_challenge/aws-route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/dns01_challenge/aws-route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Amazon Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Amazon Route53.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to IAM page and create a user
Click on next and select Attach existing policies directly and click on Create Policy.</description></item><item><title>Issue Let's Encrypt certificate using Amazon Route53</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/dns01_challenge/aws-route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/dns01_challenge/aws-route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Amazon Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Amazon Route53.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to IAM page and create a user
Click on next and select Attach existing policies directly and click on Create Policy.</description></item><item><title>Issue Let's Encrypt certificate using Amazon Route53</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/dns01_challenge/aws-route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/dns01_challenge/aws-route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Amazon Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Amazon Route53.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to IAM page and create a user
Click on next and select Attach existing policies directly and click on Create Policy.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/10.0.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/dns/route53/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.3 Server Version: v1.7.10 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/5.0.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/certificate/dns/route53/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.3 Server Version: v1.7.10 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/dns/route53/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.3 Server Version: v1.7.10 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/dns/route53/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.3 Server Version: v1.7.10 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/dns/route53/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.3 Server Version: v1.7.10 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/6.0.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.3 Server Version: v1.7.10 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.0.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.1.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.1.1/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.2.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.3.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/7.4.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/8.0.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/8.0.1/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/9.0.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/v11.0.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/v11.0.1/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Deploy Voyager operator following instructions here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/v12.0.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using AWS Route53</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/dns/route53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/dns/route53/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using AWS Route53 This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Route53 DNS service.
This article has been tested with a kops managed Kubernetes cluster on AWS.
$ kops version Version 1.7.1 (git-c69b811) $ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using Azure DNS</title><link>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/dns01_challenge/azure-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/dns01_challenge/azure-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Azure DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to your DNS Zone page:
You&amp;rsquo;ll need this Subscription id and Resource group later while creating issuer.</description></item><item><title>Issue Let's Encrypt certificate using Azure DNS</title><link>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/dns01_challenge/azure-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/dns01_challenge/azure-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Azure DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to your DNS Zone page:
You&amp;rsquo;ll need this Subscription id and Resource group later while creating issuer.</description></item><item><title>Issue Let's Encrypt certificate using Azure DNS</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/dns01_challenge/azure-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/dns01_challenge/azure-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Azure DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to your DNS Zone page:
You&amp;rsquo;ll need this Subscription id and Resource group later while creating issuer.</description></item><item><title>Issue Let's Encrypt certificate using Azure DNS</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/dns01_challenge/azure-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/dns01_challenge/azure-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Azure DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to your DNS Zone page:
You&amp;rsquo;ll need this Subscription id and Resource group later while creating issuer.</description></item><item><title>Issue Let's Encrypt certificate using Azure DNS</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/dns01_challenge/azure-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/dns01_challenge/azure-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Azure DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to your DNS Zone page:
You&amp;rsquo;ll need this Subscription id and Resource group later while creating issuer.</description></item><item><title>Issue Let's Encrypt certificate using Azure DNS</title><link>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/dns01_challenge/azure-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/dns01_challenge/azure-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Azure DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to your DNS Zone page:
You&amp;rsquo;ll need this Subscription id and Resource group later while creating issuer.</description></item><item><title>Issue Let's Encrypt certificate using Azure DNS</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/dns01_challenge/azure-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/dns01_challenge/azure-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Azure DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to your DNS Zone page:
You&amp;rsquo;ll need this Subscription id and Resource group later while creating issuer.</description></item><item><title>Issue Let's Encrypt certificate using Azure DNS</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/dns01_challenge/azure-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/dns01_challenge/azure-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Azure DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to your DNS Zone page:
You&amp;rsquo;ll need this Subscription id and Resource group later while creating issuer.</description></item><item><title>Issue Let's Encrypt certificate using Azure DNS</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/dns01_challenge/azure-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/dns01_challenge/azure-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Azure DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Azure DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer Go to your DNS Zone page:
You&amp;rsquo;ll need this Subscription id and Resource group later while creating issuer.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/10.0.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/dns/google-cloud/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.3 Server Version: v1.8.4-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0-rc.11/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/5.0.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/certificate/dns/google-cloud/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.3 Server Version: v1.8.4-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/dns/google-cloud/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.3 Server Version: v1.8.4-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/dns/google-cloud/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.3 Server Version: v1.8.4-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/dns/google-cloud/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.3 Server Version: v1.8.4-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/6.0.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.3 Server Version: v1.8.4-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.0.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.1.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.1.1/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.2.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.3.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/7.4.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/8.0.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/8.0.1/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/9.0.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer/ClusterIssuer Now create a service account from your Google Cloud Console</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v11.0.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Setup Google Cloud DNS Zone In this tutorial, I am going to use kiteci.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/dns01_challenge/google-cloud-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/dns01_challenge/google-cloud-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer/ClusterIssuer Now create a service account from your Google Cloud Console</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v11.0.1/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Deploy Voyager operator following instructions here.
curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Setup Google Cloud DNS Zone In this tutorial, I am going to use kiteci.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer/ClusterIssuer Now create a service account from your Google Cloud Console</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/dns01_challenge/google-cloud-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/dns01_challenge/google-cloud-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer/ClusterIssuer Now create a service account from your Google Cloud Console</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/dns01_challenge/google-cloud-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/dns01_challenge/google-cloud-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer/ClusterIssuer Now create a service account from your Google Cloud Console</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer/ClusterIssuer Now create a service account from your Google Cloud Console</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v12.0.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer/ClusterIssuer Now create a service account from your Google Cloud Console</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/dns01_challenge/google-cloud-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/dns01_challenge/google-cloud-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer/ClusterIssuer Now create a service account from your Google Cloud Console</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/dns01_challenge/google-cloud-dns/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 1. Setup Issuer/ClusterIssuer Now create a service account from your Google Cloud Console</description></item><item><title>Issue Let's Encrypt certificate using Google Cloud DNS</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/dns/google-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/dns/google-cloud/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using Google Cloud DNS This tutorial shows how to issue free SSL certificate from Let&amp;rsquo;s Encrypt via DNS challenge for domains using Google Cloud DNS service.
This article has been tested with a GKE cluster.
$ kubectl version --short Client Version: v1.8.8 Server Version: v1.8.8-gke.0 Deploy Voyager operator Install Voyager operator in your cluster following the steps here.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/10.0.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/10.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/10.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/http/overview/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0-rc.11/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0-rc.11/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/5.0.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/certificate/http/overview/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/http/overview/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/http/overview/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/http/overview/</guid><description>Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/6.0.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.3/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.3/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.0.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.1.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.1.1/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.2.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.2.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.2.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.3.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.3.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.3.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/7.4.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.4.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.4.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/8.0.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/8.0.1/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/9.0.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
# install without RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/9.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke If you are trying this on a RBAC enabled cluster, pass the flag --rbac to installer script.
# install with RBAC curl -fsSL https://raw.githubusercontent.com/appscode/voyager/9.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke --rbac Create Ingress We are going to use a nginx server as the backend.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/v11.0.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Create Ingress We are going to use a nginx server as the backend. To deploy nginx server, run the following commands:
kubectl run nginx --image=nginx kubectl expose deployment nginx --name=web --port=80 --target-port=80 Now create Ingress ing.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/v11.0.1/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Deploy Voyager operator following instructions here.
curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Create Ingress We are going to use a nginx server as the backend. To deploy nginx server, run the following commands:
kubectl run nginx --image=nginx kubectl expose deployment nginx --name=web --port=80 --target-port=80 Now create Ingress ing.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Install Voyager operator in your cluster following the steps here.
Create Ingress We are going to use a nginx server as the backend. To deploy nginx server, run the following commands:
kubectl run nginx --image=nginx kubectl expose deployment nginx --name=web --port=80 --target-port=80 Now create Ingress ing.yaml
kubectl apply -f https://raw.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Install Voyager operator in your cluster following the steps here.
Create Ingress We are going to use a nginx server as the backend. To deploy nginx server, run the following commands:
kubectl run nginx --image=nginx kubectl expose deployment nginx --name=web --port=80 --target-port=80 Now create Ingress ing.yaml
kubectl apply -f https://raw.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Install Voyager operator in your cluster following the steps here.
Create Ingress We are going to use a nginx server as the backend. To deploy nginx server, run the following commands:
kubectl run nginx --image=nginx kubectl expose deployment nginx --name=web --port=80 --target-port=80 Now create Ingress ing.yaml
kubectl apply -f https://raw.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/v12.0.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Install Voyager operator in your cluster following the steps here.
Create Ingress We are going to use a nginx server as the backend. To deploy nginx server, run the following commands:
kubectl run nginx --image=nginx kubectl expose deployment nginx --name=web --port=80 --target-port=80 Now create Ingress ing.yaml
kubectl apply -f https://raw.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Install Voyager operator in your cluster following the steps here.
Create Ingress We are going to use a nginx server as the backend. To deploy nginx server, run the following commands:
kubectl run nginx --image=nginx kubectl expose deployment nginx --name=web --port=80 --target-port=80 Now create Ingress ing.yaml
kubectl apply -f https://raw.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Install Voyager operator in your cluster following the steps here.
Create Ingress We are going to use a nginx server as the backend. To deploy nginx server, run the following commands:
kubectl run nginx --image=nginx kubectl expose deployment nginx --name=web --port=80 --target-port=80 Now create Ingress ing.yaml
kubectl apply -f https://raw.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/http/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/http/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge Deploy Voyager operator Install Voyager operator in your cluster following the steps here.
Create Ingress We are going to use a nginx server as the backend. To deploy nginx server, run the following commands:
kubectl create deployment nginx --image=nginx kubectl expose deployment nginx --name=web --port=80 --target-port=80 Now create Ingress ing.yaml
kubectl apply -f https://raw.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge with cert-manager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/http01_challenge/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/http01_challenge/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge with cert-manager 1. Setup Issuer/ClusterIssuer Setup a ClusterIssuer (Or Issuer) for your Ingress by applying this clusterissuer.yaml
apiVersion: certmanager.k8s.io/v1alpha1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let&amp;#39;s Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: user@example.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge with cert-manager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/http01_challenge/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/http01_challenge/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge with cert-manager 1. Setup Issuer/ClusterIssuer Setup a ClusterIssuer (Or Issuer) for your Ingress by applying this clusterissuer.yaml
apiVersion: certmanager.k8s.io/v1alpha1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let&amp;#39;s Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: user@example.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge with cert-manager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/http01_challenge/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/http01_challenge/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge with cert-manager 1. Setup Issuer/ClusterIssuer Setup a ClusterIssuer (Or Issuer) for your Ingress by applying this clusterissuer.yaml
apiVersion: certmanager.k8s.io/v1alpha1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let&amp;#39;s Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: user@example.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge with cert-manager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/http01_challenge/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/http01_challenge/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge with cert-manager 1. Setup Issuer/ClusterIssuer Setup a ClusterIssuer (Or Issuer) for your Ingress by applying this clusterissuer.yaml
apiVersion: certmanager.k8s.io/v1alpha1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let&amp;#39;s Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: user@example.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge with cert-manager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/http01_challenge/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/http01_challenge/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge with cert-manager 1. Setup Issuer/ClusterIssuer Setup a ClusterIssuer (Or Issuer) for your Ingress by applying this clusterissuer.yaml
apiVersion: certmanager.k8s.io/v1alpha1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let&amp;#39;s Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: user@example.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge with cert-manager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/http01_challenge/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/http01_challenge/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge with cert-manager 1. Setup Issuer/ClusterIssuer Setup a ClusterIssuer (Or Issuer) for your Ingress by applying this clusterissuer.yaml
apiVersion: certmanager.k8s.io/v1alpha1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let&amp;#39;s Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: user@example.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge with cert-manager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/http01_challenge/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/http01_challenge/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge with cert-manager 1. Setup Issuer/ClusterIssuer Setup a ClusterIssuer (Or Issuer) for your Ingress by applying this clusterissuer.yaml
apiVersion: certmanager.k8s.io/v1alpha1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let&amp;#39;s Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: user@example.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge with cert-manager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/http01_challenge/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/http01_challenge/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge with cert-manager 1. Setup Issuer/ClusterIssuer Setup a ClusterIssuer (Or Issuer) for your Ingress by applying this clusterissuer.yaml
apiVersion: certmanager.k8s.io/v1alpha1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let&amp;#39;s Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: user@example.</description></item><item><title>Issue Let's Encrypt certificate using HTTP-01 challenge with cert-manager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/http01_challenge/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/http01_challenge/overview/</guid><description>New to Voyager? Please start here.
Issue Let&amp;rsquo;s Encrypt certificate using HTTP-01 challenge with cert-manager 1. Setup Issuer/ClusterIssuer Setup a ClusterIssuer (Or Issuer) for your Ingress by applying this clusterissuer.yaml
apiVersion: cert-manager.io/v1 kind: ClusterIssuer metadata: name: letsencrypt-staging spec: acme: # You must replace this email address with your own. # Let&amp;#39;s Encrypt will use this to contact you about expiring # certificates, and issues related to your account. email: user@example.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>Load Balancing Algorithm | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/loadbalance-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/loadbalance-algorithm/</guid><description>New to Voyager? Please start here.
Configure Load Balancing Algorithm You can configure a backend to use a specific load balancing algorithm using backend.loadBalanceOn. You can specify any HAProxy supported options along with arguments.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: demo spec: backend: serviceName: test-server servicePort: 80 loadBalanceOn: roundrobin # configure for default backend rules: - http: port: 8989 paths: - backend: serviceName: test-server servicePort: 8989 loadBalanceOn: static-rr # configure for http backend - tcp: port: 4545 backend: serviceName: test-server servicePort: 4545 loadBalanceOn: leastconn # configure for tcp backend Generated haproxy.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/10.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.3/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.2.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.3.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.4.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/9.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, install Voyager operator in your cluster following the steps here.
Now, deploy test servers using this script script.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/source-range/</guid><description>Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS. This field will be ignored if the cloud provider does not support the feature.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/source-range/</guid><description>Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS. This field will be ignored if the cloud provider does not support the feature.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/source-range/</guid><description>Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS. This field will be ignored if the cloud provider does not support the feature.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/source-range/</guid><description>Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS. This field will be ignored if the cloud provider does not support the feature.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/source-range/</guid><description>Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS. This field will be ignored if the cloud provider does not support the feature.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Loadbalancer Source Range | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/source-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/source-range/</guid><description>New to Voyager? Please start here.
Loadbalancer Source Range When using an Ingress with ingress.appscode.com/type: LoadBalancer annotation, you can specify the IP ranges that are allowed to access the load balancer by using spec.loadBalancerSourceRanges. This field takes a list of IP CIDR ranges, which will be forwarded to Kubernetes, that will use to configure firewall exceptions. This feature is currently supported on Google Compute Engine, Google Container Engine and AWS.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using CoreOS Prometheus operator</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/using-coreos-prometheus-operator/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using CoreOS Prometheus operator This tutorial will show you how to monitor Voyager managed HAProxy pods using Prometheus via CoreOS Prometheus Operator.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.
To keep things isolated, this tutorial uses a separate namespace called demo throughout this tutorial.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.
To keep things isolated, this tutorial uses a separate namespace called demo throughout this tutorial.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitor HAProxy using Prometheus</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/using-builtin-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/using-builtin-prometheus/</guid><description>New to Voyager? Please start here.
Monitor HAProxy using Prometheus This tutorial will show you how to monitor Voyager managed HAProxy pods using builtin Prometheus scraper.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, deploy Voyager operator following instructions here.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/monitoring/operator-stats/</guid><description>Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/monitoring/operator-stats/</guid><description>Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :56790:
/metrics: Scrape this to monitor operator. To change the port, use --ops-address flag on Voyager opreator.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Monitoring Voyager operator</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/operator-stats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/operator-stats/</guid><description>New to Voyager? Please start here.
Monitoring Voyager operator Voyager operator exposes Prometheus ready metrics via the following endpoints on port :8443:
/metrics: Scrape this to monitor operator. Follow the steps below to view the metrics:
Give system:anonymous user access to /metrics url. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:metrics-collector rules: - nonResourceURLs: [&amp;#34;/metrics&amp;#34;] verbs: [&amp;#34;get&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Multiple Solver Type</title><link>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</guid><description>New to Voyager? Please start here.
Multiple Solver Type A number of different DNS providers are supported for the ACME issuer. Below is a listing of available providers, their .yaml configurations, along with additional Kubernetes and provider specific notes regarding their usage.
ACME-DNS Akamai FastDNS AzureDNS Cloudflare Google CloudDNS Amazon Route53 DigitalOcean RFC-2136 Additionally, you can create only one Issuer/ClusterIssuer for each of http01 or dns01 challange or even for multiple dns providers, like this:</description></item><item><title>Multiple Solver Type</title><link>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</guid><description>New to Voyager? Please start here.
Multiple Solver Type A number of different DNS providers are supported for the ACME issuer. Below is a listing of available providers, their .yaml configurations, along with additional Kubernetes and provider specific notes regarding their usage.
ACME-DNS Akamai FastDNS AzureDNS Cloudflare Google CloudDNS Amazon Route53 DigitalOcean RFC-2136 Additionally, you can create only one Issuer/ClusterIssuer for each of http01 or dns01 challange or even for multiple dns providers, like this:</description></item><item><title>Multiple Solver Type</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</guid><description>New to Voyager? Please start here.
Multiple Solver Type A number of different DNS providers are supported for the ACME issuer. Below is a listing of available providers, their .yaml configurations, along with additional Kubernetes and provider specific notes regarding their usage.
ACME-DNS Akamai FastDNS AzureDNS Cloudflare Google CloudDNS Amazon Route53 DigitalOcean RFC-2136 Additionally, you can create only one Issuer/ClusterIssuer for each of http01 or dns01 challange or even for multiple dns providers, like this:</description></item><item><title>Multiple Solver Type</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</guid><description>New to Voyager? Please start here.
Multiple Solver Type A number of different DNS providers are supported for the ACME issuer. Below is a listing of available providers, their .yaml configurations, along with additional Kubernetes and provider specific notes regarding their usage.
ACME-DNS Akamai FastDNS AzureDNS Cloudflare Google CloudDNS Amazon Route53 DigitalOcean RFC-2136 Additionally, you can create only one Issuer/ClusterIssuer for each of http01 or dns01 challange or even for multiple dns providers, like this:</description></item><item><title>Multiple Solver Type</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</guid><description>New to Voyager? Please start here.
Multiple Solver Type A number of different DNS providers are supported for the ACME issuer. Below is a listing of available providers, their .yaml configurations, along with additional Kubernetes and provider specific notes regarding their usage.
ACME-DNS Akamai FastDNS AzureDNS Cloudflare Google CloudDNS Amazon Route53 DigitalOcean RFC-2136 Additionally, you can create only one Issuer/ClusterIssuer for each of http01 or dns01 challange or even for multiple dns providers, like this:</description></item><item><title>Multiple Solver Type</title><link>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</guid><description>New to Voyager? Please start here.
Multiple Solver Type A number of different DNS providers are supported for the ACME issuer. Below is a listing of available providers, their .yaml configurations, along with additional Kubernetes and provider specific notes regarding their usage.
ACME-DNS Akamai FastDNS AzureDNS Cloudflare Google CloudDNS Amazon Route53 DigitalOcean RFC-2136 Additionally, you can create only one Issuer/ClusterIssuer for each of http01 or dns01 challange or even for multiple dns providers, like this:</description></item><item><title>Multiple Solver Type</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</guid><description>New to Voyager? Please start here.
Multiple Solver Type A number of different DNS providers are supported for the ACME issuer. Below is a listing of available providers, their .yaml configurations, along with additional Kubernetes and provider specific notes regarding their usage.
ACME-DNS Akamai FastDNS AzureDNS Cloudflare Google CloudDNS Amazon Route53 DigitalOcean RFC-2136 Additionally, you can create only one Issuer/ClusterIssuer for each of http01 or dns01 challange or even for multiple dns providers, like this:</description></item><item><title>Multiple Solver Type</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</guid><description>New to Voyager? Please start here.
Multiple Solver Type A number of different DNS providers are supported for the ACME issuer. Below is a listing of available providers, their .yaml configurations, along with additional Kubernetes and provider specific notes regarding their usage.
ACME-DNS Akamai FastDNS AzureDNS Cloudflare Google CloudDNS Amazon Route53 DigitalOcean RFC-2136 Additionally, you can create only one Issuer/ClusterIssuer for each of http01 or dns01 challange or even for multiple dns providers, like this:</description></item><item><title>Multiple Solver Type</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/cert-manager/dns01_challenge/multiple-challenge-solver/</guid><description>New to Voyager? Please start here.
Multiple Solver Type A number of different DNS providers are supported for the ACME issuer. Below is a listing of available providers, their .yaml configurations, along with additional Kubernetes and provider specific notes regarding their usage.
ACME-DNS Akamai FastDNS AzureDNS Cloudflare Google CloudDNS Amazon Route53 DigitalOcean RFC-2136 Additionally, you can create only one Issuer/ClusterIssuer for each of http01 or dns01 challange or even for multiple dns providers, like this:</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. This tutorial will show you how to configure multiple TLS secrets/certificates for different hosts within a single ingress.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>Multiple TLS Certificates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tls/multiple-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tls/multiple-tls/</guid><description>New to Voyager? Please start here.
Multiple TLS Certificates You can secure an Ingress by specifying TLS secrets or certificates.voyager.appscode.com resources inside spec.tls section of the Ingress. Voyager writes the TLS secrets in /etc/ssl/private/haproxy/tls/{secret-name}.pem files inside the HAProxy pod. So if you specify multiple TLS secrets, all of them will be mounted in /etc/ssl/private/haproxy/tls folder. HAProxy presents the certificate to clients which matches with the TLS Server Name Indication (SNI) field of the request.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/10.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.3/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.2.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.3.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.4.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/9.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.1/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Then, deploy and expose a test server.
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Then, deploy and expose a test server.
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Then, deploy and expose a test server.
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Then, deploy and expose a test server.
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Then, deploy and expose a test server.
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Then, deploy and expose a test server.
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, install Voyager operator in your cluster following the steps here.
Then, deploy and expose a test server.
$ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication Using Github | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/oauth-github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/oauth-github/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Github This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Github as auth provider.
Example using Github (no TLS) First configure github auth provider by following instructions provided here and generate client-id and client-secret.
Set Authorization callback URL to http://&amp;lt;host:port&amp;gt;/oauth2/callback. In this example it is set to http://voyager.appscode.ninja.
Now deploy and expose a test server:</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host.
This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using github as auth provider.
Example using Github (non-TLS) First create a new github oauth app from here and generate client-id and client-secret.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host.
This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using github as auth provider.
Example using Github (non-TLS) First create a new github oauth app from here and generate client-id and client-secret.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host.
This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using github as auth provider.
Example using Github (non-TLS) First create a new github oauth app from here and generate client-id and client-secret.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host.
This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using github as auth provider.
Example using Github (non-TLS) First create a new github oauth app from here and generate client-id and client-secret.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host.
This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using github as auth provider.
Example using Github (non-TLS) First create a new github oauth app from here and generate client-id and client-secret.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/oauth-google/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/oauth-google/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication Using Google This example will demonstrate how to configure external authentication in both TLS and non-TLS mode using Google as auth provider.
Example using Google (no TLS) First configure google auth provider by following instructions provided here and generate client-id and client-secret.
In this example Authorized JavaScript origins is set to http://voyager.appscode.ninja and Authorized redirect URIs is set to http://voyager.appscode.ninja/oauth2/callback.</description></item><item><title>OAuth2 Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/oauth/</guid><description>New to Voyager? Please start here.
OAuth2 Authentication You can configure external authentication / oauth on Voyager Ingress controller via frontendrules. For this you have to configure and expose oauth2-proxy and specify it as a backend under same host. For example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: auth-ingress namespace: default spec: frontendRules: - port: 80 auth: oauth: - host: voyager.appscode.ninja authBackend: auth-be authPath: /oauth2/auth signinPath: /oauth2/start paths: - /app rules: - host: voyager.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/10.0.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/5.0.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/6.0.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.0.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.1.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.1.1/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.2.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.3.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/7.4.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/8.0.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/8.0.1/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/9.0.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/v11.0.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/v11.0.1/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/v12.0.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Developer Guide</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/developer-guide/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/developer-guide/overview/</guid><description>Development Guide This document is intended to be the canonical source of truth for things like supported toolchain versions for building Voyager. If you find a requirement that this doc does not capture, please submit an issue on github.
This document is intended to be relative to the branch in which it is found. It is guaranteed that requirements will change over time for the development branch, but release branches of Voyager should not change.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using a custom Kubernetes Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using a custom Kubernetes Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Overview | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/concepts/overview/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
Ingress Voyager provides L7 and L4 loadbalancing using Kubernetes standard Ingress resource. This is built on top of the HAProxy to support high availability, sticky sessions, name and path-based virtual hosting among other features.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/pod-placement/</guid><description>Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, install Voyager operator in your minikube cluster following the steps here.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/pod-placement/</guid><description>Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, install Voyager operator in your minikube cluster following the steps here.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/pod-placement/</guid><description>Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, install Voyager operator in your minikube cluster following the steps here.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/pod-placement/</guid><description>Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, install Voyager operator in your minikube cluster following the steps here.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/pod-placement/</guid><description>Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.
Now, install Voyager operator in your minikube cluster following the steps here.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Placement of Ingress Pods | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/pod-placement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/pod-placement/</guid><description>New to Voyager? Please start here.
Placement of Ingress Pods Voyager has rich support for how HAProxy pods are placed on cluster nodes. Please check here to understand Kubernetes' support for pod placement.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster. If you do not already have a cluster, you can create one by using Minikube.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Profiling Voyager operator</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/operator-profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/monitoring/operator-profiling/</guid><description>New to Voyager? Please start here.
Profiling Voyager operator Voyager operator serves runtime profiling data in the format expected by the pprof visualization tool on port :8443. The handled paths all begin with /debug/pprof/.
Follow the steps below to expose profiling data:
Give system:anonymous user access to /debug/pprof/ paths. This is not safe to do on a production cluster. apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: appscode:system:profiler rules: - nonResourceURLs: [&amp;#34;/debug/pprof/&amp;#34;, &amp;#34;/debug/pprof/*&amp;#34;] verbs: [&amp;#34;get&amp;#34;, &amp;#34;post&amp;#34;] --- apiVersion: rbac.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Release | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/developer-guide/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/developer-guide/release/</guid><description>Release Process The following steps must be done from a Linux x64 bit machine.
Do a global replacement of tags so that docs point to the next release. Push changes to the release-x branch and apply new tag. Push all the changes to remote repo. Build and push voyager &amp;amp; HAProxy docker images: $ cd ~/go/src/github.com/appscode/voyager ./hack/release.sh Now, update the release notes in Github. See previous release notes to get an idea what to include there.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Roadmap | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/roadmap/</guid><description>Versioning Policy There are 2 parts to versioning policy:
Operator version: Voyager does not follow semver, rather the major version of operator points to the Kubernetes client-go version. You can verify this from the glide.yaml file. This means there might be breaking changes between point releases of the operator. This generally manifests as changed annotation keys or their meaning. Please always check the release notes for upgrade instructions. CRD version: appscode.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/scaling/</guid><description>Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/scaling/</guid><description>Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/scaling/</guid><description>Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/scaling/</guid><description>Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/scaling/</guid><description>Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To change the desired number of replicas, use the ingress.appscode.com/replicas annotation.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: my-app annotations: ingress.appscode.com/replicas: &amp;#39;2&amp;#39; spec: backend: serviceName: my-app servicePort: &amp;#39;80&amp;#39; $ kubectl get deploy voyager-my-app NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE voyager-my-app 2 2 2 2 1d Horizontal Pod Autoscaling Kubernetes has the HorizontalPodAutoscaler object for autoscaling pods.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To start the ingress with the desired number of replicas, use the ingress.appscode.com/replicas annotation.
Note that, Voyager won&amp;rsquo;t sync with this annotation if there is a HPA controlling the ingress deployment. This regulation is followed so that HPA on ingress deployment does not experience any conflicts.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To start the ingress with the desired number of replicas, use the ingress.appscode.com/replicas annotation.
Note that, Voyager won&amp;rsquo;t sync with this annotation if there is a HPA controlling the ingress deployment. This regulation is followed so that HPA on ingress deployment does not experience any conflicts.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To start the ingress with the desired number of replicas, use the ingress.appscode.com/replicas annotation.
Note that, Voyager won&amp;rsquo;t sync with this annotation if there is a HPA controlling the ingress deployment. This regulation is followed so that HPA on ingress deployment does not experience any conflicts.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To start the ingress with the desired number of replicas, use the ingress.appscode.com/replicas annotation.
Note that, Voyager won&amp;rsquo;t sync with this annotation if there is a HPA controlling the ingress deployment. This regulation is followed so that HPA on ingress deployment does not experience any conflicts.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To start the ingress with the desired number of replicas, use the ingress.appscode.com/replicas annotation.
Note that, Voyager won&amp;rsquo;t sync with this annotation if there is a HPA controlling the ingress deployment. This regulation is followed so that HPA on ingress deployment does not experience any conflicts.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To start the ingress with the desired number of replicas, use the ingress.appscode.com/replicas annotation.
Note that, Voyager won&amp;rsquo;t sync with this annotation if there is a HPA controlling the ingress deployment. This regulation is followed so that HPA on ingress deployment does not experience any conflicts.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To start the ingress with the desired number of replicas, use the ingress.appscode.com/replicas annotation.
Note that, Voyager won&amp;rsquo;t sync with this annotation if there is a HPA controlling the ingress deployment. This regulation is followed so that HPA on ingress deployment does not experience any conflicts.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To start the ingress with the desired number of replicas, use the ingress.appscode.com/replicas annotation.
Note that, Voyager won&amp;rsquo;t sync with this annotation if there is a HPA controlling the ingress deployment. This regulation is followed so that HPA on ingress deployment does not experience any conflicts.</description></item><item><title>Scaling Ingress | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/scaling/</guid><description>New to Voyager? Please start here.
Scaling Ingress Replicas For each Ingress resource, Voyager deploys HAProxy in a Deployment prefixed by voyager- and the name of the Ingress.
This Deployment has .spec.replicas = 1 by default. To start the ingress with the desired number of replicas, use the ingress.appscode.com/replicas annotation.
Note that, Voyager won&amp;rsquo;t sync with this annotation if there is a HPA controlling the ingress deployment. This regulation is followed so that HPA on ingress deployment does not experience any conflicts.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Securing Kubernetes Dashboard | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/oauth-dashboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/oauth-dashboard/</guid><description>New to Voyager? Please start here.
Securing Kubernetes Dashboard Using Github Oauth In this example we will deploy kubernetes dashboard and access it through ingress. Also secure the access with voyager external auth using github as auth provider.
Deploy Dashboard $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.8.3/src/deploy/recommended/kubernetes-dashboard.yaml By default the dashboard configures HTTPS with a self signed certificate. We need to apply ingress.appscode.com/backend-tls: ssl verify none annotation to kubernetes-dashboard service so that haproxy pod can establish HTTPS connection with dashboard pod.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/node-port/</guid><description>Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/node-port/</guid><description>Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/node-port/</guid><description>Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/node-port/</guid><description>Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/node-port/</guid><description>Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/node-port/</guid><description>New to Voyager? Please start here.
Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/sticky-session/</guid><description>Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+. Use ingress.kubernetes.io/affinity instead.
Sticky Ingress Applying annotation ingress.kubernetes.io/affinity to Ingress will configure all backends to support sticky session.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/sticky-session/</guid><description>Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+. Use ingress.kubernetes.io/affinity instead.
Sticky Ingress Applying annotation ingress.kubernetes.io/affinity to Ingress will configure all backends to support sticky session.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/sticky-session/</guid><description>Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+. Use ingress.kubernetes.io/affinity instead.
Sticky Ingress Applying annotation ingress.kubernetes.io/affinity to Ingress will configure all backends to support sticky session.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/sticky-session/</guid><description>Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 6.0.0+. Use ingress.appscode.com/affinity instead.
Sticky Ingress Applying annotation ingress.appscode.com/affinity to Ingress will configure all backends to support sticky session.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/sticky-session/</guid><description>Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 6.0.0+. Use ingress.appscode.com/affinity instead.
Sticky Ingress Applying annotation ingress.appscode.com/affinity to Ingress will configure all backends to support sticky session.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 6.0.0+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.0.0-rc.0+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.0.0-rc.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.0.0-rc.2+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.0.0-rc.3+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.0.0+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.1.0+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.1.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.2.0+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.3.0+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 7.4.0+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.0+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Sticky Session | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/sticky-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/sticky-session/</guid><description>New to Voyager? Please start here.
Sticky Session Voyager 3.2.0+ can configure sticky connections in 2 modes. By applying annotation to an Ingress resource, you can configure all backends in that ingress to use sticky session. Or you can apply annotation to a service and configure backends using that service to use sticky session.
ingress.appscode.com/sticky-session annotations is deprecated in voyager 4.0.0+ and removed in 8.0.1+. Use ingress.appscode.com/affinity instead.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/support/</guid><description>Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/welcome/support/</guid><description>Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/support/</guid><description>Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/support/</guid><description>Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/support/</guid><description>Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Support | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/support/</guid><description>New to Voyager? Please start here.
Support We use Slack for public discussions. To chit chat with us or the rest of the community, join us in the AppsCode Slack team channel #general. To sign up, use our Slack inviter.
If you have found a bug with Voyager or want to request for new features, please file an issue.</description></item><item><title>Supported Annotations | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/annotations/</guid><description>Supported Annotations Voyager operator allows customization of Ingress resource using annotation keys with ingress.appscode.com/ prefix. The ingress annotaiton keys are always string. Annotation values might have the following data types:
Value Type Description Example YAML string any valid string &amp;lsquo;v1&amp;rsquo;; &amp;ldquo;v2&amp;rdquo; integer any valid integer &amp;lsquo;1&amp;rsquo;; &amp;ldquo;2&amp;rdquo; bool 1, t, T, TRUE, true, True considered true; everything else is considered false &amp;lsquo;true&amp;rsquo; array json formatted array of string &amp;lsquo;[&amp;ldquo;v1&amp;rdquo;, &amp;ldquo;v2&amp;rdquo;]&amp;rsquo; map json formatted string to string map &amp;lsquo;{ &amp;ldquo;k1&amp;rdquo; : &amp;ldquo;v1&amp;rdquo;, &amp;ldquo;k2&amp;rdquo;: &amp;ldquo;v2&amp;rdquo; }&amp;rsquo; enum string which has a predefined set of valid values &amp;lsquo;E1&amp;rsquo;; &amp;ldquo;E2&amp;rdquo; If you are using YAML to write your Ingress, you can use any valid YAML syntax, including multi-line string.</description></item><item><title>Supported Annotations | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/annotations/</guid><description>Supported Annotations Voyager operator allows customization of Ingress resource using annotation keys with ingress.appscode.com/ prefix. The ingress annotaiton keys are always string. Annotation values might have the following data types:
Value Type Description Example YAML string any valid string &amp;lsquo;v1&amp;rsquo;; &amp;ldquo;v2&amp;rdquo; integer any valid integer &amp;lsquo;1&amp;rsquo;; &amp;ldquo;2&amp;rdquo; bool 1, t, T, TRUE, true, True considered true; everything else is considered false &amp;lsquo;true&amp;rsquo; array json formatted array of string &amp;lsquo;[&amp;ldquo;v1&amp;rdquo;, &amp;ldquo;v2&amp;rdquo;]&amp;rsquo; map json formatted string to string map &amp;lsquo;{ &amp;ldquo;k1&amp;rdquo; : &amp;ldquo;v1&amp;rdquo;, &amp;ldquo;k2&amp;rdquo;: &amp;ldquo;v2&amp;rdquo; }&amp;rsquo; enum string which has a predefined set of valid values &amp;lsquo;E1&amp;rsquo;; &amp;ldquo;E2&amp;rdquo; If you are using YAML to write your Ingress, you can use any valid YAML syntax, including multi-line string.</description></item><item><title>Supported Annotations | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/annotations/</guid><description>Supported Annotations Voyager operator allows customization of Ingress resource using annotation keys with ingress.appscode.com/ prefix. The ingress annotaiton keys are always string. Annotation values might have the following data types:
Value Type Description Example YAML string any valid string &amp;lsquo;v1&amp;rsquo;; &amp;ldquo;v2&amp;rdquo; integer any valid integer &amp;lsquo;1&amp;rsquo;; &amp;ldquo;2&amp;rdquo; bool 1, t, T, TRUE, true, True considered true; everything else is considered false &amp;lsquo;true&amp;rsquo; array json formatted array of string &amp;lsquo;[&amp;ldquo;v1&amp;rdquo;, &amp;ldquo;v2&amp;rdquo;]&amp;rsquo; map json formatted string to string map &amp;lsquo;{ &amp;ldquo;k1&amp;rdquo; : &amp;ldquo;v1&amp;rdquo;, &amp;ldquo;k2&amp;rdquo;: &amp;ldquo;v2&amp;rdquo; }&amp;rsquo; enum string which has a predefined set of valid values &amp;lsquo;E1&amp;rsquo;; &amp;ldquo;E2&amp;rdquo; If you are using YAML to write your Ingress, you can use any valid YAML syntax, including multi-line string.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/10.0.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/certificate/dns/providers/</guid><description>Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/5.0.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/certificate/dns/providers/</guid><description>Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/certificate/dns/providers/</guid><description>Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/certificate/dns/providers/</guid><description>Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/certificate/dns/providers/</guid><description>Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/6.0.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.0.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.1.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.1.1/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.2.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.3.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/7.4.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/8.0.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/8.0.1/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/9.0.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/v11.0.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/v11.0.1/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/v12.0.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Supported DNS Challenge Providers</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/dns/providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/certificate/dns/providers/</guid><description>New to Voyager? Please start here.
Supported DNS Challenge Providers To issue SSL certificate using Let&amp;rsquo;s Encrypt DNS-01 challenge, Voyager operator requires necessary permission to add and remove a TXT record for domain _acme-challenge.&amp;lt;domain&amp;gt; to complete the DNS challenge.
Supported DNS providers Please see the list of supported providers and the keys expected in credential provider secret.
Amazon Route53 Provider: aws or route53 Credential secret keys: AWS_ACCESS_KEY_ID: The access key id AWS_SECRET_ACCESS_KEY: The secret corresponding to the access key AWS_HOSTED_ZONE_ID: Optional.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/10.0.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/5.0.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/6.0.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.0.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.1.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.1.1/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.2.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.3.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/7.4.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/8.0.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/8.0.1/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/9.0.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/v11.0.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/v11.0.1/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/v12.0.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>Table of Contents | Setup</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/</guid><description>Setup Setup contains instructions for installing the Voyager and its various components in Kubernetes.
Install Voyager. Installation instructions for Voyager. Uninstall Voyager. Instructions for uninstallating Voyager. Developer Guide Overview. Outlines everything you need to know from setting up your dev environment to how to build and test Voyager. Release process. Steps for releasing a new version of Voyager.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/tcp/overview/</guid><description>TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.example.com tcp: port: &amp;#39;9898&amp;#39; backend: serviceName: tcp-service servicePort: &amp;#39;50077&amp;#39; - host: other.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/tcp/overview/</guid><description>TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.example.com tcp: port: &amp;#39;9898&amp;#39; backend: serviceName: tcp-service servicePort: &amp;#39;50077&amp;#39; - host: other.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/tcp/overview/</guid><description>TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.example.com tcp: port: &amp;#39;9898&amp;#39; backend: serviceName: tcp-service servicePort: &amp;#39;50077&amp;#39; - host: other.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/tcp/overview/</guid><description>TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.example.com tcp: port: &amp;#39;9898&amp;#39; backend: serviceName: tcp-service servicePort: &amp;#39;50077&amp;#39; - host: other.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/tcp/overview/</guid><description>TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.example.com tcp: port: &amp;#39;9898&amp;#39; backend: serviceName: tcp-service servicePort: &amp;#39;50077&amp;#39; - host: other.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP LoadBalancing | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tcp/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tcp/overview/</guid><description>New to Voyager? Please start here.
TCP LoadBalancing TCP load balancing is one of the core features of Voyager Ingress. Voyager can handle TCP Load balancing with or without TLS. One Voyager Ingress can also be used to load balance both HTTP and TCP.
One Simple TCP Rule Would be:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: tls: - secretName: mycert hosts: - other.example.com rules: - host: one.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TCP SNI | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tcp/tcp-sni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tcp/tcp-sni/</guid><description>New to Voyager? Please start here.
Using TCP SNI In TCP mode, HAProxy can choose backends using Server Name Indication (SNI). This allows clients to include the hostname during SSL Hello. SNI hostname is send in plain text. So, HAProxy can choose backend based on SNI hostname even in TCP mode.
This example demonstrates how to configure Voyager to choose backends based on SNI in TCP mode.
Minikube walk-through Deploy test server $ kubectl apply -f https://raw.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/security/tls-auth/</guid><description>TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAproxy.
SSL Client certificate management at application level Clinet side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.crt key.
ingress.kubernetes.io/auth-tls-secret: Name of secret for TLS client certification validation.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/security/tls-auth/</guid><description>TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAproxy.
SSL Client certificate management at application level Clinet side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.crt key.
ingress.kubernetes.io/auth-tls-secret: Name of secret for TLS client certification validation.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/security/tls-auth/</guid><description>TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAproxy.
SSL Client certificate management at application level Clinet side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.crt key.
ingress.kubernetes.io/auth-tls-secret: Name of secret for TLS client certification validation.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/security/tls-auth/</guid><description>TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.crt key.
ingress.appscode.com/auth-tls-secret: Name of secret for TLS client certification validation.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/security/tls-auth/</guid><description>TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.crt key.
ingress.appscode.com/auth-tls-secret: Name of secret for TLS client certification validation.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS Authentication | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/tls-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/security/tls-auth/</guid><description>New to Voyager? Please start here.
TLS Authentication This example demonstrates how to configure TLS Authentication on Voyager Ingress controller.
Using tls auth in Ingress Using tls auth in Frontend Before diving into the deep learn about TLS Auth with HAProxy.
SSL Client certificate management at application level Client side ssl certificates Using TLS Authentication Voyager Ingress read ca certificates from files stored on secrets with ca.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificate.voyager.appscode.com resource. certificate.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>TLS | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tls/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tls/overview/</guid><description>New to Voyager? Please start here.
TLS You can secure an Ingress by specifying a secret containing TLS pem or by referring a certificates.voyager.appscode.com resource. certificates.voyager.appscode.com can manage an certificate resource and use that certificate to encrypt communication.
This tutorial will show you how to secure an Ingress using TLS/SSL certificates.
Before You Begin At first, you need to have a Kubernetes cluster, and the kubectl command-line tool must be configured to communicate with your cluster.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/10.0.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/10.0.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/setup/uninstall/</guid><description>Uninstall Voyager Please follow the steps below to uninstall Voyager:
Delete the deployment and service used for Voyager operator. $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0-rc.11/hack/deploy/uninstall.sh | bash + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found Now, wait several seconds for Voyager to stop running.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/5.0.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/setup/uninstall/</guid><description>Uninstall Voyager Please follow the steps below to uninstall Voyager:
Delete the deployment and service used for Voyager operator. $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/5.0.0/hack/deploy/uninstall.sh | bash + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found Now, wait several seconds for Voyager to stop running.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/setup/uninstall/</guid><description>Uninstall Voyager Please follow the steps below to uninstall Voyager:
Delete the deployment and service used for Voyager operator. $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found Now, wait several seconds for Voyager to stop running.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/setup/uninstall/</guid><description>Uninstall Voyager Please follow the steps below to uninstall Voyager:
Delete the deployment and service used for Voyager operator. $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found Now, wait several seconds for Voyager to stop running.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/setup/uninstall/</guid><description>Uninstall Voyager Please follow the steps below to uninstall Voyager:
Delete the deployment and service used for Voyager operator. $ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found Now, wait several seconds for Voyager to stop running.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/6.0.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/6.0.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.1/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.2/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0-rc.3/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.0.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.1.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.1.1/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.1.1/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.2.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.2.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.3.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.3.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/7.4.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.4.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/8.0.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/8.0.1/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/8.0.1/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/9.0.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/9.0.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.0/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
$ curl -fsSL https://raw.githubusercontent.com/appscode/voyager/v11.0.1/hack/deploy/voyager.sh \ | bash -s -- --uninstall [--namespace=NAMESPACE] + kubectl delete deployment -l app=voyager -n kube-system deployment &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete service -l app=voyager -n kube-system service &amp;quot;voyager-operator&amp;quot; deleted + kubectl delete serviceaccount -l app=voyager -n kube-system No resources found + kubectl delete clusterrolebindings -l app=voyager -n kube-system No resources found + kubectl delete clusterrole -l app=voyager -n kube-system No resources found The above command will leave the Voyager crd objects as-is.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
Helm 3 Helm 2 YAML Using Helm 3 In Helm 3, release names are scoped to a namespace. So, provide the namespace you used to install the operator when installing.
$ helm uninstall voyager-operator --namespace kube-system Using Helm 2 $ helm delete voyager-operator Using YAML (with helm 3) If you prefer to not use Helm, you can generate YAMLs from Voyager operator chart and uninstall using kubectl.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
Helm 3 Helm 2 YAML Using Helm 3 In Helm 3, release names are scoped to a namespace. So, provide the namespace you used to install the operator when installing.
$ helm uninstall voyager-operator --namespace kube-system Using Helm 2 $ helm delete voyager-operator Using YAML (with helm 3) If you prefer to not use Helm, you can generate YAMLs from Voyager operator chart and uninstall using kubectl.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
Helm 3 Helm 2 YAML Using Helm 3 In Helm 3, release names are scoped to a namespace. So, provide the namespace you used to install the operator when installing.
$ helm uninstall voyager-operator --namespace kube-system Using Helm 2 $ helm delete voyager-operator Using YAML (with helm 3) If you prefer to not use Helm, you can generate YAMLs from Voyager operator chart and uninstall using kubectl.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
Helm 3 Helm 2 YAML Using Helm 3 In Helm 3, release names are scoped to a namespace. So, provide the namespace you used to install the operator when installing.
$ helm uninstall voyager-operator --namespace kube-system Using Helm 2 $ helm delete voyager-operator Using YAML (with helm 3) If you prefer to not use Helm, you can generate YAMLs from Voyager operator chart and uninstall using kubectl.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
Helm 3 Helm 2 YAML Using Helm 3 In Helm 3, release names are scoped to a namespace. So, provide the namespace you used to install the operator when installing.
$ helm uninstall voyager-operator --namespace kube-system Using Helm 2 $ helm delete voyager-operator Using YAML (with helm 3) If you prefer to not use Helm, you can generate YAMLs from Voyager operator chart and uninstall using kubectl.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
Helm 3 Helm 2 YAML Using Helm 3 In Helm 3, release names are scoped to a namespace. So, provide the namespace you used to install the operator when installing.
$ helm uninstall voyager-operator --namespace kube-system Using Helm 2 $ helm delete voyager-operator Using YAML (with helm 3) If you prefer to not use Helm, you can generate YAMLs from Voyager operator chart and uninstall using kubectl.</description></item><item><title>Uninstall Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/uninstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/setup/uninstall/</guid><description>New to Voyager? Please start here.
Uninstall Voyager To uninstall Voyager operator, run the following command:
Helm 3 Helm 2 YAML Using Helm 3 In Helm 3, release names are scoped to a namespace. So, provide the namespace you used to install the operator when installing.
$ helm uninstall voyager-operator --namespace kube-system Using Helm 2 $ helm delete voyager-operator Using YAML (with helm 3) If you prefer to not use Helm, you can generate YAMLs from Voyager operator chart and uninstall using kubectl.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/tls/aws-cert-manager/</guid><description>Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/tls/aws-cert-manager/</guid><description>Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/tls/aws-cert-manager/</guid><description>Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/tls/aws-cert-manager/</guid><description>Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/tls/aws-cert-manager/</guid><description>Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using AWS Certificate Manager | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tls/aws-cert-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/tls/aws-cert-manager/</guid><description>New to Voyager? Please start here.
Using AWS Certificate Manager Voyager can use AWS certificate manager to terminate SSL connections for LoadBalancer type ingress in aws provider. To use this feature, add the following annotations to Ingress;
ingress.appscode.com/annotations-service: |{ &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-cert&amp;#34;: &amp;#34;arn:aws:acm:...&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;service.beta.kubernetes.io/aws-load-balancer-ssl-ports&amp;#34;: &amp;#34;443&amp;#34; } Voyager operator will apply these annotation on LoadBalancer service used to expose HAProxy to internet. This service will (logically) listen on port 443, terminate SSL and forward to port 80 on HAProxy pods.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/configuration/custom-templates/</guid><description>Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/custom-templates/</guid><description>Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/configuration/custom-templates/</guid><description>Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/configuration/custom-templates/</guid><description>Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/configuration/custom-templates/</guid><description>Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/configuration/custom-templates/</guid><description>New to Voyager? Please start here.
Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/external-svc/</guid><description>Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/external-svc/</guid><description>Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/external-svc/</guid><description>Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/external-svc/</guid><description>Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/external-svc/</guid><description>Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Using External Service as Ingress Backend | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/external-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/external-svc/</guid><description>New to Voyager? Please start here.
Using External Service as Ingress Backend You can use an external service as a Backend for Kubernetes Ingress. There are 2 options depending on whether the external service has an external IP or DNS record.
Using External IP You can introduce any external IP address as a Kubernetes service by creating a matching Service and Endpoint object. Then you can use this service as a backend for your Ingress rules.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/guides/ingress/http/virtual-hosting/</guid><description>Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/http/virtual-hosting/</guid><description>Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/guides/ingress/http/virtual-hosting/</guid><description>Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/guides/ingress/http/virtual-hosting/</guid><description>Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/guides/ingress/http/virtual-hosting/</guid><description>Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Virtual Hosting | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/virtual-hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/guides/ingress/http/virtual-hosting/</guid><description>New to Voyager? Please start here.
Virtual Hosting Hostname based Routing Name-based virtual hosts use multiple host names for the same IP address.
foo.bar.com --| |-&amp;gt; foo.bar.com s1:80 | load balancer | bar.foo.com --| |-&amp;gt; bar.foo.com s2:80 The following Ingress tells the backing loadbalancer to route requests based on the Host header.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: foo.bar.com http: paths: - backend: serviceName: s1 servicePort: &amp;#39;80&amp;#39; - host: bar.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/10.0.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log.format logFormatFlag Set the log target and format.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr (default 2) -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager check - Check Ingress voyager export - Export Prometheus metrics for HAProxy voyager kloader - Reloads HAProxy when configmap changes voyager run - Run operator voyager tls-mounter - Mounts TLS certificates in HAProxy pods voyager version - Prints binary version number.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/5.0.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr (default 2) -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager check - Check Ingress voyager export - Export Prometheus metrics for HAProxy voyager kloader - Reloads HAProxy when configmap changes voyager run - Run operator voyager tls-mounter - Mounts TLS certificates in HAProxy pods voyager version - Prints binary version number.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager check - Check Ingress voyager export - Export Prometheus metrics for HAProxy voyager haproxy-controller - Synchronizes HAProxy config voyager run - Launch Voyager Ingress Controller voyager version - Prints binary version number.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager check - Check Ingress voyager export - Export Prometheus metrics for HAProxy voyager haproxy-controller - Synchronizes HAProxy config voyager run - Launch Voyager Ingress Controller voyager version - Prints binary version number.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager check - Check Ingress voyager export - Export Prometheus metrics for HAProxy voyager haproxy-controller - Synchronizes HAProxy config voyager run - Launch Voyager Ingress Controller voyager version - Prints binary version number.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/6.0.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager check - Check Ingress voyager export - Export Prometheus metrics for HAProxy voyager haproxy-controller - Synchronizes HAProxy config voyager run - Launch Voyager Ingress Controller voyager version - Prints binary version number.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager check - Check Ingress voyager export - Export Prometheus metrics for HAProxy voyager haproxy-controller - Synchronizes HAProxy config voyager run - Launch Voyager Ingress Controller voyager version - Prints binary version number.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager check - Check Ingress voyager export - Export Prometheus metrics for HAProxy voyager haproxy-controller - Synchronizes HAProxy config voyager run - Launch Voyager Ingress Controller voyager version - Prints binary version number.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.0.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.1.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.1.1/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.2.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.3.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/7.4.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/8.0.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/8.0.1/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/9.0.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log.format logFormatFlag Set the log target and format.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager/</guid><description>voyager Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Synopsis Voyager by Appscode - Secure HAProxy Ingress Controller for Kubernetes
Options --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) -h, --help help for voyager --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/10.0.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check --ingress-class string Ingress class handled by voyager. Unset by default. Set to voyager to only handle ingress with annotation kubernetes.io/ingress.class=voyager. --kube-context string Name of Kubeconfig context Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/5.0.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check --ingress-class string Ingress class handled by voyager. Unset by default. Set to voyager to only handle ingress with annotation kubernetes.io/ingress.class=voyager. --kube-context string Name of Kubeconfig context Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/6.0.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.0.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.1.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.1.1/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.2.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.3.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/7.4.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/8.0.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/8.0.1/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/9.0.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/v11.0.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/v11.0.1/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/v12.0.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Check</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_check/</guid><description>voyager check Check Ingress
Synopsis Check Ingress
voyager check [flags] Options -c, --cloud-provider string Name of cloud provider --from-file string YAML formatted file containing ingress -h, --help help for check Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/10.0.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/5.0.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/6.0.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.0.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.1.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.1.1/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.2.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.3.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/7.4.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/8.0.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/8.0.1/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/9.0.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/v11.0.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/v11.0.1/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/v12.0.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Export</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_export/</guid><description>voyager export Export Prometheus metrics for HAProxy
Synopsis Export Prometheus metrics for HAProxy
voyager export [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --haproxy.server-metric-fields string Comma-separated list of exported server metrics. See http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#9.1 (default &amp;quot;2,3,4,5,6,7,8,9,13,14,15,16,17,18,21,24,33,35,38,39,40,41,42,43,44&amp;quot;) --haproxy.timeout duration Timeout for trying to get stats from HAProxy. (default 5s) -h, --help help for export --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/10.0.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --init-only If true, exits after initial tls mount --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --init-only If true, exits after initial tls mount --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --init-only If true, exits after initial tls mount --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/6.0.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --init-only If true, exits after initial tls mount --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.0.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.1.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.1.1/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.2.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.3.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/7.4.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/8.0.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/8.0.1/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/9.0.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/v11.0.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/v11.0.1/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/v12.0.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Haproxy-Controller</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_haproxy-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_haproxy-controller/</guid><description>voyager haproxy-controller Synchronizes HAProxy config
Synopsis Synchronizes HAProxy config
voyager haproxy-controller [command] [flags] Options --burst int The maximum burst for throttle (default 1000000) --cert-dir string Path where tls certificates are stored for HAProxy (default &amp;quot;/etc/ssl/private/haproxy&amp;quot;) -c, --cloud-provider string Name of cloud provider -h, --help help for haproxy-controller --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Kloader</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_kloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_kloader/</guid><description>voyager kloader Reloads HAProxy when configmap changes
Synopsis Reloads HAProxy when configmap changes
Options -h, --help help for kloader Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr (default 2) -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager - Voyager by Appscode - Secure Ingress Controller for Kubernetes voyager kloader check - Validate kloader configuration voyager kloader run - Run and hold kloader</description></item><item><title>Voyager Kloader</title><link>https://voyagermesh.com/docs/5.0.0/reference/voyager_kloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/reference/voyager_kloader/</guid><description>voyager kloader Reloads HAProxy when configmap changes
Synopsis Reloads HAProxy when configmap changes
Options -h, --help help for kloader Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr (default 2) -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager - Voyager by Appscode - Secure Ingress Controller for Kubernetes voyager kloader check - Validate kloader configuration voyager kloader run - Run and hold kloader</description></item><item><title>Voyager Kloader Check</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_kloader_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_kloader_check/</guid><description>voyager kloader check Validate kloader configuration
Synopsis Validate kloader configuration
voyager kloader check [flags] Options -b, --boot-cmd string Bash script that will be run on every change of the file --burst int The maximum burst for throttle (default 1000000) -c, --configmap string Configmap name that needs to be mount -h, --help help for check --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Kloader Check</title><link>https://voyagermesh.com/docs/5.0.0/reference/voyager_kloader_check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/reference/voyager_kloader_check/</guid><description>voyager kloader check Validate kloader configuration
Synopsis Validate kloader configuration
voyager kloader check [flags] Options -b, --boot-cmd string Bash script that will be run on every change of the file --burst int The maximum burst for throttle (default 1000000) -c, --configmap string Configmap name that needs to be mount -h, --help help for check --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Kloader Run</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_kloader_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_kloader_run/</guid><description>voyager kloader run Run and hold kloader
Synopsis Run and hold kloader
voyager kloader run [flags] Options -b, --boot-cmd string Bash script that will be run on every change of the file --burst int The maximum burst for throttle (default 1000000) -c, --configmap string Configmap name that needs to be mount -h, --help help for run --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Kloader Run</title><link>https://voyagermesh.com/docs/5.0.0/reference/voyager_kloader_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/reference/voyager_kloader_run/</guid><description>voyager kloader run Run and hold kloader
Synopsis Run and hold kloader
voyager kloader run [flags] Options -b, --boot-cmd string Bash script that will be run on every change of the file --burst int The maximum burst for throttle (default 1000000) -c, --configmap string Configmap name that needs to be mount -h, --help help for run --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/10.0.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_run/</guid><description>voyager run Run operator
Synopsis Run operator
voyager run [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --burst int The maximum burst for throttle (default 1000000) --cloud-config string The path to the cloud provider configuration file. Empty string for no configuration file. -c, --cloud-provider string Name of cloud provider --custom-templates string Glob pattern of custom HAProxy template files used to override built-in templates --exporter-sidecar-image string Docker image containing Prometheus exporter (default &amp;quot;appscode/voyager:5.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/5.0.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/reference/voyager_run/</guid><description>voyager run Run operator
Synopsis Run operator
voyager run [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --burst int The maximum burst for throttle (default 1000000) --cloud-config string The path to the cloud provider configuration file. Empty string for no configuration file. -c, --cloud-provider string Name of cloud provider --custom-templates string Glob pattern of custom HAProxy template files used to override built-in templates --exporter-sidecar-image string Docker image containing Prometheus exporter (default &amp;quot;appscode/voyager:5.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --address string Address to listen on for web interface and telemetry. (default &amp;quot;:56790&amp;quot;) --audit-log-format string Format of saved audits. &amp;quot;legacy&amp;quot; indicates 1-line text format for each event. &amp;quot;json&amp;quot; indicates structured json format. Requires the 'AdvancedAuditing' feature gate. Known formats are legacy,json. (default &amp;quot;json&amp;quot;) --audit-log-maxage int The maximum number of days to retain old audit log files based on the timestamp encoded in their filename.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-format string Format of saved audits. &amp;quot;legacy&amp;quot; indicates 1-line text format for each event. &amp;quot;json&amp;quot; indicates structured json format. Requires the 'AdvancedAuditing' feature gate. Known formats are legacy,json. (default &amp;quot;json&amp;quot;) --audit-log-maxage int The maximum number of days to retain old audit log files based on the timestamp encoded in their filename. --audit-log-maxbackup int The maximum number of old audit log files to retain.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-format string Format of saved audits. &amp;quot;legacy&amp;quot; indicates 1-line text format for each event. &amp;quot;json&amp;quot; indicates structured json format. Requires the 'AdvancedAuditing' feature gate. Known formats are legacy,json. (default &amp;quot;json&amp;quot;) --audit-log-maxage int The maximum number of days to retain old audit log files based on the timestamp encoded in their filename. --audit-log-maxbackup int The maximum number of old audit log files to retain.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/6.0.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-format string Format of saved audits. &amp;quot;legacy&amp;quot; indicates 1-line text format for each event. &amp;quot;json&amp;quot; indicates structured json format. Requires the 'AdvancedAuditing' feature gate. Known formats are legacy,json. (default &amp;quot;json&amp;quot;) --audit-log-maxage int The maximum number of days to retain old audit log files based on the timestamp encoded in their filename. --audit-log-maxbackup int The maximum number of old audit log files to retain.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-format string Format of saved audits. &amp;quot;legacy&amp;quot; indicates 1-line text format for each event. &amp;quot;json&amp;quot; indicates structured json format. Requires the 'AdvancedAuditing' feature gate. Known formats are legacy,json. (default &amp;quot;json&amp;quot;) --audit-log-maxage int The maximum number of days to retain old audit log files based on the timestamp encoded in their filename. --audit-log-maxbackup int The maximum number of old audit log files to retain.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.0.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.1.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.1.1/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.2.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.3.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/7.4.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/8.0.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/8.0.1/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 400) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/9.0.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/v11.0.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/v11.0.1/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/v12.0.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Run</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_run/</guid><description>voyager run Launch Voyager Ingress Controller
Synopsis Launch Voyager Ingress Controller
voyager run [flags] Options --audit-dynamic-configuration Enables dynamic audit configuration. This feature also requires the DynamicAuditing feature flag --audit-log-batch-buffer-size int The size of the buffer to store events before batching and writing. Only used in batch mode. (default 10000) --audit-log-batch-max-size int The maximum size of a batch. Only used in batch mode. (default 1) --audit-log-batch-max-wait duration The amount of time to wait before force writing the batch that hadn't reached the max size.</description></item><item><title>Voyager Tls-Mounter</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_tls-mounter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_tls-mounter/</guid><description>voyager tls-mounter Mounts TLS certificates in HAProxy pods
Synopsis Mounts TLS certificates in HAProxy pods
voyager tls-mounter [command] [flags] Options -b, --boot-cmd string Bash script that will be run on every change of the file --burst int The maximum burst for throttle (default 1000000) -c, --cloud-provider string Name of cloud provider -h, --help help for tls-mounter --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --init-only If true, exits after initial tls mount --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Tls-Mounter</title><link>https://voyagermesh.com/docs/5.0.0/reference/voyager_tls-mounter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/reference/voyager_tls-mounter/</guid><description>voyager tls-mounter Mounts TLS certificates in HAProxy pods
Synopsis Mounts TLS certificates in HAProxy pods
voyager tls-mounter [command] [flags] Options -b, --boot-cmd string Bash script that will be run on every change of the file --burst int The maximum burst for throttle (default 1000000) -c, --cloud-provider string Name of cloud provider -h, --help help for tls-mounter --ingress-api-version string API version of ingress resource --ingress-name string Name of ingress resource --init-only If true, exits after initial tls mount --kubeconfig string Path to kubeconfig file with authorization information (the master location is set by the master flag).</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/10.0.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr (default 2) -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager - Voyager by Appscode - Secure Ingress Controller for Kubernetes</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/5.0.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr (default 2) -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager - Voyager by Appscode - Secure Ingress Controller for Kubernetes</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager - Voyager by Appscode - Secure Ingress Controller for Kubernetes</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager - Voyager by Appscode - Secure Ingress Controller for Kubernetes</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above. Valid levels: [debug, info, warn, error, fatal] (default &amp;quot;info&amp;quot;) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr -v, --v Level log level for V logs --vmodule moduleSpec comma-separated list of pattern=N settings for file-filtered logging SEE ALSO voyager - Voyager by Appscode - Secure Ingress Controller for Kubernetes</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/6.0.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.0.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.1.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.1.1/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.2.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.3.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/7.4.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?json=true&amp;quot; (default &amp;quot;logger:stderr&amp;quot;) --log.level levelFlag Only log messages with the given severity or above.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/8.0.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/8.0.1/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log.format logFormatFlag Set the log target and format. Example: &amp;quot;logger:syslog?appname=bob&amp;amp;local=7&amp;quot; or &amp;quot;logger:stdout?</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/9.0.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/v11.0.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/v11.0.1/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options --check string Check version constraint -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/v12.0.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options --check string Check version constraint -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options --check string Check version constraint -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options --check string Check version constraint -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Voyager Version</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/reference/voyager_version/</guid><description>voyager version Prints binary version number.
Synopsis Prints binary version number.
voyager version [flags] Options --check string Check version constraint -h, --help help for version --short Print just the version number. Options inherited from parent commands --alsologtostderr log to standard error as well as files --bypass-validating-webhook-xray if true, bypasses validating webhook xray checks --enable-analytics Send analytical events to Google Analytics (default true) --log-flush-frequency duration Maximum number of seconds between log flushes (default 5s) --log_backtrace_at traceLocation when logging hits line file:N, emit a stack trace (default :0) --log_dir string If non-empty, write log files in this directory --logtostderr log to standard error instead of files --stderrthreshold severity logs at or above this threshold go to stderr --use-kubeapiserver-fqdn-for-aks if true, uses kube-apiserver FQDN for AKS cluster to workaround https://github.</description></item><item><title>Weclome | Voyager</title><link>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0-rc.11/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Weclome | Voyager</title><link>https://voyagermesh.com/docs/5.0.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Weclome | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Weclome | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.1/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Weclome | Voyager</title><link>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0-rc.2/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/10.0.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/10.0.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/6.0.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/6.0.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.1/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.2/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0-rc.3/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.1.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.1.1/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.1.1/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.2.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.2.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.3.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.3.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/7.4.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.4.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/8.0.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/8.0.1/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/8.0.1/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/9.0.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/9.0.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/v11.0.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/v11.0.1/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v11.0.1/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.1/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0-rc.2/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/v12.0.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v12.0.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v13.0.0-beta.1/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item><item><title>Welcome | Voyager</title><link>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/v2021.04.24-rc.0/welcome/</guid><description>Voyager Voyager is a HAProxy backed secure L7 and L4 ingress controller for Kubernetes developed by AppsCode. This can be used with any Kubernetes cloud providers including aws, gce, gke, azure, acs. This can also be used with bare metal Kubernetes clusters.
From here you can learn all about Voyager&amp;rsquo;s architecture and how to deploy and use Voyager.
Concepts. Concepts explain some significant aspect of Voyager. This is where you can learn about what Voyager does and how it does it.</description></item></channel></rss>