<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Types of Ingress | Voyager on Secure HAProxy Ingress Controller for Kubernetes</title><link>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/</link><description>Recent content in Types of Ingress | Voyager on Secure HAProxy Ingress Controller for Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/index.xml" rel="self" type="application/rss+xml"/><item><title>HostPort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/hostport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/hostport/</guid><description>HostPort In HostPort type Ingress, HAProxy pods are run via a Kubernetes deployment named voyager-${ingress-name} with hostNetwork: true. A headless Service is also created for the HAProxy pods. To enable this, apply the ingress.appscode.com/type: HostPort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Now, deploy test servers using this script script. curl -fsSL https://raw.</description></item><item><title>Internal Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/internal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/internal/</guid><description>Internal In Internal type Ingress, HAProxy pods are exposed via a ClusterIP type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: Internal annotation on a Ingress object. Unlike Kubernetes Service which operates at L4 level, this creates a cluster internal L7 proxy. An example use-case is proxy for ElasticSearch cluster to handle persistent connections, alleviating the ElasticSearch servers from having to deal w/ tons of connection creations.
How It Works First, deploy voyager operator.</description></item><item><title>LoadBalancer Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/loadbalancer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/loadbalancer/</guid><description>LoadBalancer In LoadBalancer type Ingress, HAProxy pods are exposed via a LoadBalancer type Kubernetes service named voyager-${ingress-name}. You can apply the ingress.appscode.com/type: LoadBalancer annotation on a Ingress object to enable this type of Ingress. This is also the default type for Ingress objects. So, this annotaion is not required to enable this type.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=gke Now, deploy test servers using this script script.</description></item><item><title>NodePort Ingress | Voyager</title><link>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/nodeport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/7.0.0/concepts/ingress-types/nodeport/</guid><description>NodePort In NodePort type Ingress, HAProxy pods are exposed via a NodePort type Kubernetes service named voyager-${ingress-name}. To enable this, apply the ingress.appscode.com/type: NodePort annotation on a Ingress object.
How It Works First, deploy voyager operator. curl -fsSL https://raw.githubusercontent.com/appscode/voyager/7.0.0/hack/deploy/voyager.sh \ | bash -s -- --provider=minikube Then, deploy and expose a test server. $ kubectl run test-server --image=gcr.io/google_containers/echoserver:1.8 deployment &amp;quot;test-server&amp;quot; created $ kubectl expose deployment test-server --type=LoadBalancer --port=80 --target-port=8080 service &amp;quot;test-server&amp;quot; exposed Now, create an Ingress with ingress.</description></item></channel></rss>