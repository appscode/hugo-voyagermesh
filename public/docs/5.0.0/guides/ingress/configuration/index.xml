<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configuration on Secure HAProxy Ingress Controller for Kubernetes</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/</link><description>Recent content in Configuration on Secure HAProxy Ingress Controller for Kubernetes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/bind-address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/bind-address/</guid><description/></item><item><title>Backend Rules | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/backend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/backend-rule/</guid><description>Backend Rules Voyager supports full spectrum of HAProxy backend rules via backendRule. Read more about HAProxy backend rules.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: rules: - host: appscode.example.com http: paths: - path: &amp;#39;/test&amp;#39; backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; backendRule: - &amp;#39;acl add_url capture.req.uri -m beg /test-second&amp;#39; - &amp;#39;http-response set-header X-Added-From-Proxy added-from-proxy if add_url&amp;#39; This example will apply an acl to the server backend, and a extra header from Loadbalancer if request uri starts with /test-second.</description></item><item><title>Customize Ingress Timeouts | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/default-timeouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/default-timeouts/</guid><description>Customize Timeouts Custom timeouts can be configured for HAProxy via annotations. Supports all valid timeout option for defaults section of HAProxy. Read More
ingress.appscode.com/default-timeout expects a JSON encoded map of timeouts values.
Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-timeout: &amp;#39;{&amp;#34;connect&amp;#34;: &amp;#34;5s&amp;#34;, &amp;#34;server&amp;#34;: &amp;#34;10s&amp;#34;}&amp;#39; spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; rules: - host: appscode.example.com http: paths: - backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; This ingress will generate a HAProxy template with provided timeouts.</description></item><item><title>Default HAProxy Options | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/default-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/default-options/</guid><description>Default HAProxy Options Voyager Supports all valid options for defaults section of HAProxy config. You can provide these options using a json encoded map in Ingress annotaiotns liek below:
ingress.appscode.com/default-option: '{&amp;quot;http-keep-alive&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;dontlognull&amp;quot;: &amp;quot;true&amp;quot;, &amp;quot;clitcpka&amp;quot;: &amp;quot;false&amp;quot;}'
This will be appended in the defaults section of HAProxy as:
option http-keep-alive option dontlognull no option clitcpka Ingress Example:
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default annotations: ingress.appscode.com/default-options: &amp;#39;{&amp;#34;http-keep-alive&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;dontlognull&amp;#34;: &amp;#34;true&amp;#34;, &amp;#34;clitcpka&amp;#34;: &amp;#34;false&amp;#34;}&amp;#39; spec: backend: serviceName: test-service servicePort: &amp;#39;80&amp;#39; rules: - host: appscode.</description></item><item><title>Frontend Ingress Rules| Voyager</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/frontend-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/frontend-rule/</guid><description>Frontend Rules Frontend rules specify a set of rules that are applied to HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1. Only frontend sections can be applied here. It is up to user to provide valid sets of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped to spec.rules according to HAProxy port.
apiVersion: voyager.appscode.com/v1beta1 kind: Ingress metadata: name: test-ingress namespace: default spec: frontendRules: - port: 80 # Applies all the rule in frontend section for port 80 rules: - timeout client 5s # Set the maximum inactivity time on the client side.</description></item><item><title>Specify Ingress NodePort | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/node-port/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/node-port/</guid><description>Specify NodePort If you are using a NodePort or LoadBalancer type Ingress, a NodePort or LoadBalancer type Service is used to expose HAProxy pods respectively. If no node port is specified for each HAProxy Service port, Kubernetes will randomly assign one for you.
Since 3.2.0, you have the option to specify a NodePort for each HAProxy Service port. This allows you to guarantee that the port will not get changed, as you make changes to an Ingress object.</description></item><item><title>Supported Annotations | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/annotations/</guid><description>Supported Annotations Voyager operator allows customization of Ingress resource using annotation keys with ingress.appscode.com/ prefix. The ingress annotaiton keys are always string. Annotation values might have the following data types:
Value Type Description Example YAML string any valid string &amp;lsquo;v1&amp;rsquo;; &amp;ldquo;v2&amp;rdquo; integer any valid integer &amp;lsquo;1&amp;rsquo;; &amp;ldquo;2&amp;rdquo; bool 1, t, T, TRUE, true, True considered true; everything else is considered false &amp;lsquo;true&amp;rsquo; array json formatted array of string &amp;lsquo;[&amp;ldquo;v1&amp;rdquo;, &amp;ldquo;v2&amp;rdquo;]&amp;rsquo; map json formatted string to string map &amp;lsquo;{ &amp;ldquo;k1&amp;rdquo; : &amp;ldquo;v1&amp;rdquo;, &amp;ldquo;k2&amp;rdquo;: &amp;ldquo;v2&amp;rdquo; }&amp;rsquo; enum string which has a predefined set of valid values &amp;lsquo;E1&amp;rsquo;; &amp;ldquo;E2&amp;rdquo; If you are using YAML to write your Ingress, you can use any valid YAML syntax, including multi-line string.</description></item><item><title>Using Custom HAProxy Templates | Kubernetes Ingress</title><link>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/custom-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://voyagermesh.com/docs/5.0.0/guides/ingress/configuration/custom-templates/</guid><description>Using Custom HAProxy Templates Since 3.2.0, Voyager can use custom templates provided by users to render HAProxy configuration. Voyager comes with a set of GO text/templates found here. These templates are mounted at /srv/voyager/templates. You can mount a ConfigMap with matching template names when installing Voyager operator to a different location and pass that to Voyager operator using --custom-templates flag. Voyager will load the built-in templates first and then load any custom templates if provided.</description></item></channel></rss>